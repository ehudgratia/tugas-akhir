type = "lower",
lab = TRUE,
lab_size = 3,
colors = c("red", "white", "blue"),
title = "Matriks Korelasi Setelah Penghapusan",
show.legend = TRUE,
ggtheme = ggplot2::theme_minimal())
# Recursive Feature Elimination (RFE)
## memilih fitur terbaik
set.seed(123)
# Kontrol untuk RFE
control <- rfeControl(functions = rfFuncs, method = "cv", number = 10)
# Jalankan Recursive Feature Elimination
rfe_result <- rfe(feature_filtered, target, sizes = c(1:10), rfeControl = control)
rfe_result
# Principal Component Analysis (PCA)
## Mengambil nama fitur terbaik
selected_features <- predictors(rfe_result)
## Data frame hanya dengan fitur yang dipilih
features_selected <- feature_filtered[, selected_features]
## Pre-Processing Data
rfe_pre <- preProcess(features_selected, method = c("center", "scale"))
## Normalisasi
rfe_scaled <- predict(rfe_pre, features_selected)
## Cek ringkasan data setelah standarisasi
summary(rfe_scaled)
## Jalankan PCA dengan data yang telah distandarisasi
pca_result <- PCA(rfe_scaled, graph = FALSE)
## Lihat ringkasan PCA
summary(pca_result)
## Melacak kontribusi variabel
pca_result$var$contrib
## Jumlah komponen utama yang optimal untuk analisis
fviz_eig(pca_result, addlabels = TRUE, ylim = c(0, 100))
## Membuat peta factor untuk kontribusi variabel
fviz_pca_var(pca_result, col.var = "contrib", gradient.cols = c("#002bbb", "#bb2e00"), repel = TRUE)
## Visualisasi kontribusi dari variabel
fviz_contrib(pca_result, choice = "var", axes = 1, top = 5)
## Visualisasi untuk semua hubungan antar variabel
fviz_pca_biplot(pca_result)
# Menggabungkan variabel feature dengan variabel target
final_data <- cbind(features_selected, stunting = target)
#Visualisasi Distrubusi Stunting
ggplot(final_data, aes(x = as.factor(stunting))) +
geom_bar(fill = "blue") +
labs(title = "Distribusi Data Stunting",
x = "Stunting",
y = "Frekuensi") +
theme_minimal
# Library yang berisi kumpulan packages untuk analisis data
library(tidyverse)
# library untuk manipulasi data
library(dplyr)
# library untuk manipulasi data tanggal
library(lubridate)
# library untuk menampilkan hasil statistik deskriptif
library(summarytools)
# library untuk visualisasi data
library (ggplot2)
#Mengabungkan visualisasi
library(gridExtra)
# library untuk membaca data dari file Excel (.xlsx)
library(readxl)
library(caret)
#PCA
library(FactoMineR)
#visualisasi PCA
library(factoextra)
#Correlation Matrix
library(corrplot)
# Visualisasi Correlation Matrix
library(ggcorrplot)
library(ranger)
library(randomForest)
library(pROC)
library(boot)
library(caTools)
library(e1071)
rfe_result
set.seed(123)  # Untuk hasil yang dapat direproduksi
data_index <- createDataPartition(final_data$stunting, p = 0.7, list = FALSE)
data_train <- final_data[data_index, ]
data_test <- final_data[-data_index, ]
data_train
data_test
data_train$stunting <- as.numeric(as.character(data_train$stunting))
# Fungsi untuk menghitung statistik (misalnya, rata-rata dari variabel tertentu)
boot_function <- function(data, indices) {
sample_data <- data[indices, ]  # Ambil sampel bootstrap
return(mean(sample_data$stunting))  # Estimasi rata-rata stunting
}
# Lakukan bootstrap sampling sebanyak 1000 kali
set.seed(123)
boot_result <- boot(data_train, statistic = boot_function, R = 1000)
# Plot distribusi hasil bootstrap
hist(boot_result$t, col = "blue", main = "Distribusi Bootstrap Mean Stunting", xlab = "Mean Stunting")
# menghitung interval kepercayaan
quantile(boot_result$t, probs = c(0.025, 0.975))
# mengubah variabel target menjadi faktor
data_train$stunting <- as.factor(data_train$stunting)
data_test$stunting <- as.factor(data_test$stunting)
# Membangun Model RF
set.seed(123) #Set seed untuk hasil yang reproducible
rf_model <- randomForest(stunting ~ ., data = data_train, importance = TRUE)
# Print hasil model
print(rf_model)
# Prediksi
pred_train <- predict(rf_model, newdata = data_train, type = "class")
pred_test  <- predict(rf_model, newdata = data_test, type = "class")
# Evaluasi model pada training data
conf_matrix_train <- confusionMatrix(pred_train, data_train$stunting)
print(conf_matrix_train)
# Evaluasi model pada test data
conf_matrix_test <- confusionMatrix(pred_test, data_test$stunting)
print(conf_matrix_test)
# Menampilkan metrik tambahan untuk test data
cat("Akurasi pada data test:", conf_matrix_test$overall["Accuracy"], "\n")
cat("Recall pada data test:", conf_matrix_test$byClass["Sensitivity"], "\n")
cat("Precision pada data test:", conf_matrix_test$byClass["Precision"], "\n")
cat("F1-score pada data test:", conf_matrix_test$byClass["F1"], "\n")
# Melakukan Prediksi
pred_test  <- predict(rf_model, newdata = data_test, type = "class")
# Evaluasi model pada test data
conf_matrix_test <- confusionMatrix(pred_test, data_test$stunting)
conf_matrix_test
# Menampilkan metrik tambahan untuk test data
cat("Akurasi pada data test:", conf_matrix_test$overall["Accuracy"], "\n")
cat("Recall pada data test:", conf_matrix_test$byClass["Sensitivity"], "\n")
cat("Precision pada data test:", conf_matrix_test$byClass["Precision"], "\n")
cat("F1-score pada data test:", conf_matrix_test$byClass["F1"], "\n")
# Plot pentingnya fitur
varImpPlot(rf_model, main = "Feature Importance - Random Forest")
# Library yang berisi kumpulan packages untuk analisis data
library(tidyverse)
# library untuk manipulasi data
library(dplyr)
# library untuk manipulasi data tanggal
library(lubridate)
# library untuk menampilkan hasil statistik deskriptif
library(summarytools)
# library untuk visualisasi data
library (ggplot2)
#Mengabungkan visualisasi
library(gridExtra)
# library untuk membaca data dari file Excel (.xlsx)
library(readxl)
library(caret)
#PCA
library(FactoMineR)
#visualisasi PCA
library(factoextra)
#Correlation Matrix
library(corrplot)
# Visualisasi Correlation Matrix
library(ggcorrplot)
library(ranger)
library(randomForest)
library(pROC)
library(boot)
library(caTools)
library(e1071)
# Plot pentingnya fitur
varImpPlot(rf_model, main = "Feature Importance - Random Forest")
# Visualisasi
ggplot(importance, aes(x = reorder(row.names(importance), MeanDecreaseGini), y = MeanDecreaseGini)) +
geom_bar(stat = "identity", fill = "blue") +
coord_flip() +
labs(title = "Feature Importance - Random Forest", x = "Faktor Sosioekonomi", y = "Tingkat Kepentingan")
# Plot pentingnya fitur
varImpPlot(rf_model, main = "Feature Importance - Random Forest")
# Feature Importance dari model Random Forest
importance <- as.data.frame(importance(rf_model))
importance <- importance[order(-importance$MeanDecreaseGini), , drop=FALSE]
print(importance)
# Visualisasi
ggplot(importance, aes(x = reorder(row.names(importance), MeanDecreaseGini), y = MeanDecreaseGini)) +
geom_bar(stat = "identity", fill = "blue") +
coord_flip() +
labs(title = "Feature Importance - Random Forest", x = "Faktor Sosioekonomi", y = "Tingkat Kepentingan")
# Library yang berisi kumpulan packages untuk analisis data
library(tidyverse)
# library untuk manipulasi data
library(dplyr)
# library untuk manipulasi data tanggal
library(lubridate)
# library untuk menampilkan hasil statistik deskriptif
library(summarytools)
# library untuk visualisasi data
library (ggplot2)
#Mengabungkan visualisasi
library(gridExtra)
# library untuk membaca data dari file Excel (.xlsx)
library(readxl)
library(caret)
#PCA
library(FactoMineR)
#visualisasi PCA
library(factoextra)
#Correlation Matrix
library(corrplot)
# Visualisasi Correlation Matrix
library(ggcorrplot)
library(ranger)
library(randomForest)
library(pROC)
library(boot)
library(caTools)
library(e1071)
# Plot pentingnya fitur
varImpPlot(rf_model, main = "Feature Importance - Random Forest")
# Feature Importance dari model Random Forest
importance <- as.data.frame(importance(rf_model))
importance <- importance[order(-importance$MeanDecreaseGini), , drop=FALSE]
print(importance)
# Visualisasi
ggplot(importance, aes(x = reorder(row.names(importance), MeanDecreaseGini), y = MeanDecreaseGini)) +
geom_bar(stat = "identity", fill = "blue") +
coord_flip() +
labs(title = "Feature Importance - Random Forest", x = "Faktor Sosioekonomi", y = "Tingkat Kepentingan")
# Hitung probabilitas prediksi
probabilities <- predict(rf_model, data_test, type = "prob")[,2]
# ROC Curve dan AUC
roc_curve <- roc(data_test$stunting, probabilities)
plot(roc_curve, col = "blue", main = "ROC Curve - Random Forest")
auc(roc_curve)
# Library yang berisi kumpulan packages untuk analisis data
library(tidyverse)
# library untuk manipulasi data
library(dplyr)
# library untuk manipulasi data tanggal
library(lubridate)
# library untuk menampilkan hasil statistik deskriptif
library(summarytools)
# library untuk visualisasi data
library (ggplot2)
#Mengabungkan visualisasi
library(gridExtra)
# library untuk membaca data dari file Excel (.xlsx)
library(readxl)
library(caret)
#PCA
library(FactoMineR)
#visualisasi PCA
library(factoextra)
#Correlation Matrix
library(corrplot)
# Visualisasi Correlation Matrix
library(ggcorrplot)
library(ranger)
library(randomForest)
library(pROC)
library(boot)
library(caTools)
library(e1071)
summary(tune.out)
# Library yang berisi kumpulan packages untuk analisis data
library(tidyverse)
# library untuk menampilkan hasil statistik deskriptif
library(summarytools)
#Mengabungkan visualisasi
library(gridExtra)
# library untuk membaca data dari file Excel (.xlsx)
library(readxl)
# library untuk membangun dan mengevaluasi model machine learning
library(caret)
# library untuk melakukan analisis multivariat
library(FactoMineR)
# library untuk visualisasi hasil analisis multivariat
library(factoextra)
# library untuk membuat visualisasi matriks korelasi secara grafis
library(corrplot)
# Visualisasi Correlation Matrix
library(ggcorrplot)
# library untuk Implementasi Random Forest yang lebih cepat dan efisien
library(ranger)
# library untuk membangun model Random Forest
library(randomForest)
# library untuk membuat kurva ROC dan menghitung AUC
library(pROC)
# library untuk melakukan analisis statistik berbasis bootstrap
library(boot)
# library untuk membagi data menjadi train dan test
library(caTools)
# library untuk implementasi Support Vector Machine (SVM)
library(e1071)
# Histogram - Distribusi jumlah balita
p1 <- ggplot(data_clean, aes(x = jumlah_balita)) +
geom_histogram(bins = 30, fill = "blue", color = "black", alpha = 0.6) +
labs(title = "Distribusi Data Jumlah Balita",
x = "Jumlah Balita",
y = "Frekuensi") +
theme_minimal()
# Boxplot - Distribusi jumlah balita
p2 <- ggplot(data_clean, aes(x = jumlah_balita)) +
geom_boxplot() +
labs(title = "Boxplot Jumlah Balita",
x = "Jumlah Balita",
y = "Frekuensi") +
theme_minimal()
# Log Transformasi untuk membuat distribusi lebih seimbang
data_clean$jumlah_balita <- log1p(data_clean$jumlah_balita)  # log1p untuk menangani nol
# Histogram - Visualisasi Distribusi Data setelah Transformasi Log
p3 <- ggplot(data_clean, aes(x = jumlah_balita)) +
geom_histogram(bins = 30, fill = "blue", color = "black", alpha = 0.6) +
labs(title = "Distribusi Data Jumlah Balita\n(Log Transformasi)",
x = "Log(Jumlah Balita)",
y = "Frekuensi") +
theme_minimal()
# Boxplot - Visualisasi Distribusi Data setelah Transformasi Log
p4 <- ggplot(data_clean, aes(x = jumlah_balita)) +
geom_boxplot() +
labs(title = "Boxplot Jumlah Balita\n(Log Transformasi)",
x = "Log(Jumlah Balita)",
y = "Frekuensi") +
theme_minimal()
grid.arrange(p1, p2, ncol = 2)
grid.arrange(p3, p4, ncol = 2)
# Hitung probabilitas prediksi
probabilities_rf <- predict(rf_model, data_test, type = "prob")[,2]
# ROC Curve dan AUC
roc_curve <- roc(data_test$stunting, probabilities_rf)
plot(roc_curve, col = "blue", main = "ROC Curve - Random Forest")
auc(roc_curve)
set.seed(123)  # Untuk hasil yang dapat direproduksi
data_index <- createDataPartition(final_data$stunting, p = 0.7, list = FALSE)
data_train <- final_data[data_index, ]
data_test <- final_data[-data_index, ]
# mengubah variabel target menjadi faktor
data_train$stunting <- as.factor(data_train$stunting)
data_test$stunting <- as.factor(data_test$stunting)
data_train
data_test
# menggunakan karnel radial
svm_radial <-svm(stunting ~., data = data_train, kernel = 'radial', cost = 100, gamma = 0.1)
# Library yang berisi kumpulan packages untuk analisis data
library(tidyverse)
# library untuk menampilkan hasil statistik deskriptif
library(summarytools)
#Mengabungkan visualisasi
library(gridExtra)
# library untuk membaca data dari file Excel (.xlsx)
library(readxl)
# library untuk membangun dan mengevaluasi model machine learning
library(caret)
# library untuk melakukan analisis multivariat
library(FactoMineR)
# library untuk visualisasi hasil analisis multivariat
library(factoextra)
# library untuk membuat visualisasi matriks korelasi secara grafis
library(corrplot)
# Visualisasi Correlation Matrix
library(ggcorrplot)
# library untuk Implementasi Random Forest yang lebih cepat dan efisien
library(ranger)
# library untuk membangun model Random Forest
library(randomForest)
# library untuk membuat kurva ROC dan menghitung AUC
library(pROC)
# library untuk melakukan analisis statistik berbasis bootstrap
library(boot)
# library untuk membagi data menjadi train dan test
library(caTools)
# library untuk implementasi Support Vector Machine (SVM)
library(e1071)
# menggunakan karnel radial
svm_radial <-svm(stunting ~., data = data_train, kernel = 'radial', cost = 100, gamma = 0.1)
predicted.values <- predict(svm_radial, data_test)
# Evaluasi model pada test data
conf_matrix_svmradial <- confusionMatrix(pred_svm, data_test$stunting)
# menggunakan karnel radial
svm_radial <-svm(stunting ~., data = data_train, kernel = 'radial', cost = 100, gamma = 0.1)
predicted.values <- predict(svm_radial, data_test)
# Evaluasi model pada test data
conf_matrix_svmradial <- confusionMatrix(predicted.values, data_test$stunting)
conf_matrix_svmradial
# Menggunakan karnel polynomial
svm_poly <- svm(stunting ~ ., data = data_train, kernel = "polynomial", cost = 100, gamma = 0.1)
pred_poly <- predict(svm_poly, data_test)
# Evaluasi model pada test data
conf_matrix_svmpoly <- confusionMatrix(pred_poly, data_test$stunting)
conf_matrix_svmpoly
# Menggunakan karnel linear
svm_linear <- svm(stunting ~ ., data = data_train, kernel = "linear", cost = 100)
pred_linear <- predict(svm_linear, data_test)
# Evaluasi model pada test data
conf_matrix_svmlinear <- confusionMatrix(pred_linear, data_test$stunting)
conf_matrix_svmlinear
# Menggunakan karnel sigmoid
svm_sigmoid <- svm(stunting ~ ., data = data_train, kernel = "sigmoid", cost = 100, gamma = 0.1)
pred_sigmoid <- predict(svm_sigmoid, data_test)
# Evaluasi model pada test data
conf_matrix_svmsigmoid <- confusionMatrix(pred_sigmoid, data_test$stunting)
conf_matrix_svmsigmoid
svm_model <- svm(stunting ~., data = data_train)
print(svm_model)
install.packages(iml)
install.packages("iml")
# library untuk mengetahui feature importance dari model svm
library(iml)
#Siapkan data untuk 'iml'
X <- data_train[, -which(names(data_train) == "stunting")]  # hanya fitur (tanpa label)
y <- data_train$stunting  # labelnya
#Bungkus model jadi 'Predictor'
predictor <- Predictor$new(svm_radial, data = X, y = y, type = "prob")
#Bungkus model jadi 'Predictor'
predictor <- Predictor$new(svm_model, data = X, y = y, type = "prob")
# Simpan hasil ke data.frame
importance_df <- imp$results
# Library yang berisi kumpulan packages untuk analisis data
library(tidyverse)
# library untuk menampilkan hasil statistik deskriptif
library(summarytools)
#Mengabungkan visualisasi
library(gridExtra)
# library untuk membaca data dari file Excel (.xlsx)
library(readxl)
# library untuk membangun dan mengevaluasi model machine learning
library(caret)
# library untuk melakukan analisis multivariat
library(FactoMineR)
# library untuk visualisasi hasil analisis multivariat
library(factoextra)
# library untuk membuat visualisasi matriks korelasi secara grafis
library(corrplot)
# Visualisasi Correlation Matrix
library(ggcorrplot)
# library untuk Implementasi Random Forest yang lebih cepat dan efisien
library(ranger)
# library untuk membangun model Random Forest
library(randomForest)
# library untuk membuat kurva ROC dan menghitung AUC
library(pROC)
# library untuk melakukan analisis statistik berbasis bootstrap
library(boot)
# library untuk membagi data menjadi train dan test
library(caTools)
# library untuk implementasi Support Vector Machine (SVM)
library(e1071)
# library untuk mengetahui feature importance dari model svm
library(iml)
#Siapkan data untuk 'iml'
X <- data_train[, -which(names(data_train) == "stunting")]  # hanya fitur (tanpa label)
y <- data_train$stunting  # labelnya
#Bungkus model jadi 'Predictor'
predictor <- Predictor$new(svm_radial, data = X, y = y, type = "prob")
#Bungkus model jadi 'Predictor'
predictor <- Predictor$new(svm_model, data = X, y = y, type = "prob")
# Simpan hasil ke data.frame
importance_df <- imp$results
# Library yang berisi kumpulan packages untuk analisis data
library(tidyverse)
# library untuk menampilkan hasil statistik deskriptif
library(summarytools)
#Mengabungkan visualisasi
library(gridExtra)
# library untuk membaca data dari file Excel (.xlsx)
library(readxl)
# library untuk membangun dan mengevaluasi model machine learning
library(caret)
# library untuk melakukan analisis multivariat
library(FactoMineR)
# library untuk visualisasi hasil analisis multivariat
library(factoextra)
# library untuk membuat visualisasi matriks korelasi secara grafis
library(corrplot)
# Visualisasi Correlation Matrix
library(ggcorrplot)
# library untuk Implementasi Random Forest yang lebih cepat dan efisien
library(ranger)
# library untuk membangun model Random Forest
library(randomForest)
# library untuk membuat kurva ROC dan menghitung AUC
library(pROC)
# library untuk melakukan analisis statistik berbasis bootstrap
library(boot)
# library untuk membagi data menjadi train dan test
library(caTools)
# library untuk implementasi Support Vector Machine (SVM)
library(e1071)
# library untuk mengetahui feature importance dari model svm
library(iml)
#Siapkan data untuk 'iml'
X <- data_train[, -which(names(data_train) == "stunting")]  # hanya fitur (tanpa label)
y <- data_train$stunting  # labelnya
#Bungkus model jadi 'Predictor'
predictor <- Predictor$new(svm_radial, data = X, y = y, type = "prob")
#Bungkus model jadi 'Predictor'
predictor <- Predictor$new(svm_model, data = X, y = y, type = "prob")
# Simpan hasil ke data.frame
importance_df <- imp$results
View(predictor)
#Siapkan data untuk 'iml'
X <- data_train[, -which(names(data_train) == "stunting")]  # hanya fitur (tanpa label)
y <- data_train$stunting  # labelnya
#Bungkus model jadi 'Predictor'
predictor <- Predictor$new(svm_radial, data = X, y = y, type = "prob")
#Bungkus model jadi 'Predictor'
predictor <- Predictor$new(model = svm_radial, data = X, y = y, type = "prob")
# Simpan hasil ke data.frame
importance_df <- imp$results
accuracy <- (8570+8602)/(8570+0+147+8602)
accuracy
View(final_data)
$$Accuracy= (TP + TN) / (TP+ FP + FN + TN)$$
# Random Forest
accuracy_rf <- (20359 + 20051) / (20359 + 0 + 0 + 20051)
accuracy_rf
# Random Forest
accuracy_rf <- (8555 + 8357) / (8555 + 9 + 142 + 20051)
accuracy_rf
accuracy <- (8555+8612)/(8555+9+142+8612)
accuracy
