svm_model2 <-svm(stunting ~., data =train_final, kernel='radial',
cost = 100, gamma = 0.1)
# Prediksi dan Evaluasi
pred_svm2 <- predict(svm_model2, test_final)
conf_matrix_svm2 <- confusionMatrix(pred_svm2, test_final$stunting)
# Hasil model svm
print(svm_model2)
print(conf_matrix_svm2)
# Ekstrak confusion matrix dari caret
cm_svmmodel2 <- as.data.frame(conf_matrix_svm2$table)
# Ganti nama kolom supaya konsisten
colnames(cm_svmmodel2) <- c("Prediction", "Reference", "Freq")
# Plot pakai ggplot2
ggplot(cm_svmmodel2, aes(x = Reference, y = Prediction, fill = Freq)) +
geom_tile(color = "black") +
geom_text(aes(label = Freq), size = 6) +
scale_fill_gradient(low = "white", high = "skyblue") +
labs(
title = "Confusion Matrix - svm_model2",
x = "Actual (Reference)",
y = "Predicted",
fill = "Count"
) +
theme_minimal() +
coord_fixed()
# Extract Metrics
metrics_rf <- conf_matrix_rf$byClass[c("Precision", "Recall", "F1")]
accuracy_rf <- conf_matrix_rf$overall["Accuracy"]
metrics_svm <- conf_matrix_svm$byClass[c("Precision", "Recall", "F1")]
accuracy_svm <- conf_matrix_svm$overall["Accuracy"]
# satukan datata
metrics_df <- tibble(
Metric = c("Accuracy", "Precision", "Recall", "F1-score"),
RF = c(accuracy_rf, metrics_rf),
SVM = c(accuracy_svm, metrics_svm)
) %>%
pivot_longer(cols = c(RF, SVM), names_to = "Model", values_to = "Value")
# Visualisasi
ggplot(metrics_df, aes(x = Metric, y = Value, fill = Model)) +
geom_col(position = position_dodge(width = 0.7), width = 0.6) +
geom_text(aes(label = round(Value, 3)),
position = position_dodge(width = 0.7),
vjust = -0.5, size = 3) +
scale_fill_manual(values = c("RF" = "#1b9e77", "SVM" = "#d95f02")) +
labs(title = "Perbandingan Kinerja Model rf_model vs svm_model",
y = "Nilai Metrik", x = "Metrik Evaluasi") +
theme_minimal()
# Extract Metrics
metrics_rf2 <- conf_matrix_rf2$byClass[c("Precision", "Recall", "F1")]
accuracy_rf2 <- conf_matrix_rf2$overall["Accuracy"]
metrics_svm2 <- conf_matrix_svm2$byClass[c("Precision", "Recall", "F1")]
accuracy_svm2 <- conf_matrix_svm2$overall["Accuracy"]
# satukan datata
metrics_df2 <- tibble(
Metric = c("Accuracy", "Recall", "Precision", "F1-score"),
RF = c(accuracy_rf2, metrics_rf2),
SVM = c(accuracy_svm2, metrics_svm2)
) %>%
pivot_longer(cols = c(RF, SVM), names_to = "Model", values_to = "Value")
# Visualisasi
ggplot(metrics_df2, aes(x = Metric, y = Value, fill = Model)) +
geom_col(position = position_dodge(width = 0.7), width = 0.6) +
geom_text(aes(label = round(Value, 3)),
position = position_dodge(width = 0.7),
vjust = -0.5, size = 3) +
scale_fill_manual(values = c("RF" = "#1b9e77", "SVM" = "#d95f02")) +
labs(title = "Perbandingan Kinerja Model rf_model2 vs svm_model2",
y = "Nilai Metrik", x = "Metrik Evaluasi") +
theme_minimal()
# Buat prediktor untuk model RF
predictor_rf <- Predictor$new(
model = rf_model,
data = test_final[, -which(names(test_final) == "stunting")],
y = test_final$stunting
)
# Hitung Permutation Importance
imp_rf <- FeatureImp$new(predictor_rf, loss = "ce")
# Buat objek prediktor
predictor_svm <- Predictor$new(
model = svm_model,
data = test_final[, -which(names(test_final) == "stunting")],  # semua fitur
y = test_final$stunting
)
# Hitung feature importance dengan Permutation
imp_svm <- FeatureImp$new(predictor_svm, loss = "ce")
# Ambil hasil importance dari model
df_rf <- as.data.frame(imp_rf$results)
df_svm <- as.data.frame(imp_svm$results)
# Contoh plot importance untuk Random Forest
p39 <- ggplot(df_rf, aes(x = reorder(feature, importance), y = importance)) +
geom_bar(stat = "identity", fill = "blue") +
coord_flip() +
labs(title = "Permutation Feature Importance\nrf_model",
x = "Fitur",
y = "Importance (Penurunan Akurasi)") +
theme_minimal()
# Contoh plot importance untuk SVM
p40 <- ggplot(df_svm, aes(x = reorder(feature, importance), y = importance)) +
geom_bar(stat = "identity", fill = "blue") +
coord_flip() +
labs(title = "Permutation Feature Importance\nsvm_model",
x = "Fitur",
y = "Importance (Penurunan Akurasi)") +
theme_minimal()
grid.arrange(p39, p40, ncol = 2)
# Buat prediktor untuk model RF
predictor_rf2 <- Predictor$new(
model = rf_model2,
data = test_final[, -which(names(test_final) == "stunting")],
y = test_final$stunting
)
# Hitung Permutation Importance
imp_rf2 <- FeatureImp$new(predictor_rf, loss = "ce")
# Buat objek prediktor
predictor_svm2 <- Predictor$new(
model = svm_model2,
data = test_final[, -which(names(test_final) == "stunting")],  # semua fitur
y = test_final$stunting
)
# Hitung feature importance dengan Permutation
imp_svm2 <- FeatureImp$new(predictor_svm2, loss = "ce")
# Ambil hasil importance dari model
df_rf2 <- as.data.frame(imp_rf2$results)
df_svm2 <- as.data.frame(imp_svm2$results)
# Contoh plot importance untuk Random Forest
p41 <- ggplot(df_rf2, aes(x = reorder(feature, importance), y = importance)) +
geom_bar(stat = "identity", fill = "blue") +
coord_flip() +
labs(title = "Permutation Feature Importance\nrf_model2",
x = "Fitur",
y = "Importance (Penurunan Akurasi)") +
theme_minimal()
# Contoh plot importance untuk SVM
p42 <- ggplot(df_svm2, aes(x = reorder(feature, importance), y = importance)) +
geom_bar(stat = "identity", fill = "blue") +
coord_flip() +
labs(title = "Permutation Feature Importance\nsvm_model2",
x = "Fitur",
y = "Importance (Penurunan Akurasi)") +
theme_minimal()
grid.arrange(p41, p42, ncol = 2)
# Model 3: Kernel linear dengan parameter cost tinggi
svm_model3 <- svm(stunting ~., data = train_final,
kernel = 'linear',  # Kernel linear
cost = 1000,        # Cost sangat tinggi
scale = FALSE)      # Tidak melakukan scaling otomatis
# Prediksi dan Evaluasi
pred_svm3 <- predict(svm_model3, test_final)
conf_matrix_svm3 <- confusionMatrix(pred_svm3, test_final$stunting)
# Hasil model svm
print(svm_model3)
print(conf_matrix_svm3)
# Ekstrak confusion matrix dari caret
cm_svmmodel3 <- as.data.frame(conf_matrix_svm3$table)
# Ganti nama kolom supaya konsisten
colnames(cm_svmmodel3) <- c("Prediction", "Reference", "Freq")
# Plot pakai ggplot2
ggplot(cm_svmmodel3, aes(x = Reference, y = Prediction, fill = Freq)) +
geom_tile(color = "black") +
geom_text(aes(label = Freq), size = 6) +
scale_fill_gradient(low = "white", high = "skyblue") +
labs(
title = "Confusion Matrix - svm_model3",
x = "Actual (Reference)",
y = "Predicted",
fill = "Count"
) +
theme_minimal() +
coord_fixed()
# Library yang berisi kumpulan packages untuk analisis data
library(tidyverse)
# library untuk manipulasi data
library(dplyr)
# library untuk manipulasi data tanggal
library(lubridate)
# library untuk menampilkan hasil statistik deskriptif
library(summarytools)
# library untuk visualisasi data
library (ggplot2)
#Mengabungkan visualisasi
library(gridExtra)
# library untuk membaca data dari file Excel (.xlsx)
library(readxl)
library(caret)
#PCA
library(FactoMineR)
#visualisasi PCA
library(factoextra)
#Correlation Matrix
library(corrplot)
# Visualisasi Correlation Matrix
library(ggcorrplot)
library(ranger)
library(randomForest)
library(pROC)
library(boot)
library(caTools)
library(e1071)
library(reshape2)
library(iml)
library(mlr)
# Model 3: Kernel linear dengan parameter cost tinggi
svm_model3 <- svm(stunting ~., data = train_final,
kernel = 'linear',  # Kernel linear
cost = 1000,        # Cost sangat tinggi
scale = FALSE)      # Tidak melakukan scaling otomatis
# Prediksi dan Evaluasi
pred_svm3 <- predict(svm_model3, test_final)
conf_matrix_svm3 <- confusionMatrix(pred_svm3, test_final$stunting)
# Hasil model svm
print(svm_model3)
print(conf_matrix_svm3)
# Ekstrak confusion matrix dari caret
cm_svmmodel3 <- as.data.frame(conf_matrix_svm3$table)
# Ganti nama kolom supaya konsisten
colnames(cm_svmmodel3) <- c("Prediction", "Reference", "Freq")
# Plot pakai ggplot2
ggplot(cm_svmmodel3, aes(x = Reference, y = Prediction, fill = Freq)) +
geom_tile(color = "black") +
geom_text(aes(label = Freq), size = 6) +
scale_fill_gradient(low = "white", high = "skyblue") +
labs(
title = "Confusion Matrix - svm_model3",
x = "Actual (Reference)",
y = "Predicted",
fill = "Count"
) +
theme_minimal() +
coord_fixed()
# Model 2: Lebih teratur dengan regularisasi
set.seed(123)
rf_model2 <- randomForest(stunting ~ ., data = train_final,
ntree = 300,  # Sedikit mengurangi jumlah pohon
mtry = floor(sqrt(ncol(train_final)-1)),  # Kembali ke default
nodesize = 15,  # Ukuran node lebih besar
maxnodes = 30,  # Batas node lebih longgar
sampsize = 0.7*nrow(train_final), # Subsample data
importance = TRUE)
# Prediksi & evaluasi
pred_rf2 <- predict(rf_model2, test_final)
conf_matrix_rf2 <- confusionMatrix(pred_rf2, test_final$stunting)
## hasil
print(rf_model2)
print(conf_matrix_rf2)
# Ekstrak confusion matrix dari caret
cm_rfmodel2 <- as.data.frame(conf_matrix_rf2$table)
# Ganti nama kolom supaya konsisten
colnames(cm_rfmodel2) <- c("Prediction", "Reference", "Freq")
# Plot pakai ggplot2
ggplot(cm_rfmodel2, aes(x = Reference, y = Prediction, fill = Freq)) +
geom_tile(color = "black") +
geom_text(aes(label = Freq), size = 6) +
scale_fill_gradient(low = "white", high = "skyblue") +
labs(
title = "Confusion Matrix - rf_model2",
x = "Actual (Reference)",
y = "Predicted",
fill = "Count"
) +
theme_minimal() +
coord_fixed()
# Model 3: Konfigurasi sangat konservatif
set.seed(123)
rf_model3 <- randomForest(stunting ~ ., data = train_final,
ntree = 150,
mtry = max(floor(ncol(train_final)/3), 3),
nodesize = 25,
maxnodes = 15,
strata = train_final$stunting,  # Stratified sampling
sampsize = c("0" = 500, "1" = 500),  # Balanced subsample
importance = TRUE)
# Prediksi & evaluasi
pred_rf3 <- predict(rf_model3, test_final)
conf_matrix_rf3 <- confusionMatrix(pred_rf3, test_final$stunting)
## hasil
print(rf_model3)
print(conf_matrix_rf3)
# Ekstrak confusion matrix dari caret
cm_rfmodel3 <- as.data.frame(conf_matrix_rf3$table)
# Ganti nama kolom supaya konsisten
colnames(cm_rfmodel3) <- c("Prediction", "Reference", "Freq")
# Plot pakai ggplot2
ggplot(cm_rfmodel3, aes(x = Reference, y = Prediction, fill = Freq)) +
geom_tile(color = "black") +
geom_text(aes(label = Freq), size = 6) +
scale_fill_gradient(low = "white", high = "skyblue") +
labs(
title = "Confusion Matrix - rf_model3",
x = "Actual (Reference)",
y = "Predicted",
fill = "Count"
) +
theme_minimal() +
coord_fixed()
# Model 2: Kernel radial dengan regularisasi lebih ketat
svm_model2 <- svm(stunting ~., data = train_final,
kernel = 'radial',
cost = 10,  # Regularisasi lebih kuat
gamma = 0.01,  # Pengaruh titik data lebih kecil
class.weights = c("0" = 1, "1" = 2))  # Menangani ketidakseimbangan kelas
# Prediksi dan Evaluasi
pred_svm2 <- predict(svm_model2, test_final)
conf_matrix_svm2 <- confusionMatrix(pred_svm2, test_final$stunting)
# Hasil model svm
print(svm_model2)
print(conf_matrix_svm2)
# Ekstrak confusion matrix dari caret
cm_svmmodel2 <- as.data.frame(conf_matrix_svm2$table)
# Ganti nama kolom supaya konsisten
colnames(cm_svmmodel2) <- c("Prediction", "Reference", "Freq")
# Plot pakai ggplot2
ggplot(cm_svmmodel2, aes(x = Reference, y = Prediction, fill = Freq)) +
geom_tile(color = "black") +
geom_text(aes(label = Freq), size = 6) +
scale_fill_gradient(low = "white", high = "skyblue") +
labs(
title = "Confusion Matrix - svm_model1",
x = "Actual (Reference)",
y = "Predicted",
fill = "Count"
) +
theme_minimal() +
coord_fixed()
# Plot pakai ggplot2
ggplot(cm_svmmodel2, aes(x = Reference, y = Prediction, fill = Freq)) +
geom_tile(color = "black") +
geom_text(aes(label = Freq), size = 6) +
scale_fill_gradient(low = "white", high = "skyblue") +
labs(
title = "Confusion Matrix - svm_model2",
x = "Actual (Reference)",
y = "Predicted",
fill = "Count"
) +
theme_minimal() +
coord_fixed()
# Plot pakai ggplot2
ggplot(cm_svmmodel1, aes(x = Reference, y = Prediction, fill = Freq)) +
geom_tile(color = "black") +
geom_text(aes(label = Freq), size = 6) +
scale_fill_gradient(low = "white", high = "skyblue") +
labs(
title = "Confusion Matrix - svm_model1",
x = "Actual (Reference)",
y = "Predicted",
fill = "Count"
) +
theme_minimal() +
coord_fixed()
# Model 1
svm_model1 <-svm(stunting ~., data =train_final,
kernel='radial',
cost = 100,
gamma = 0.1)
# Prediksi dan Evaluasi
pred_svm1 <- predict(svm_model1, test_final)
conf_matrix_svm1 <- confusionMatrix(pred_svm1, test_final$stunting)
# Hasil model svm
print(svm_model1)
print(conf_matrix_svm1)
# Ekstrak confusion matrix dari caret
cm_svmmodel1 <- as.data.frame(conf_matrix_svm1$table)
# Ganti nama kolom supaya konsisten
colnames(cm_svmmodel1) <- c("Prediction", "Reference", "Freq")
# Plot pakai ggplot2
ggplot(cm_svmmodel1, aes(x = Reference, y = Prediction, fill = Freq)) +
geom_tile(color = "black") +
geom_text(aes(label = Freq), size = 6) +
scale_fill_gradient(low = "white", high = "skyblue") +
labs(
title = "Confusion Matrix - svm_model1",
x = "Actual (Reference)",
y = "Predicted",
fill = "Count"
) +
theme_minimal() +
coord_fixed()
# Hasil model svm
print(svm_model2)
print(conf_matrix_svm2)
# Model 3: Kernel polynomial dengan regularisasi
svm_model3 <- svm(stunting ~., data = train_final,
kernel = 'polynomial',
cost = 0.5,  # Margin lebih lebar
scale = TRUE,  # Scaling otomatis
class.weights = c("0" = 1, "1" = 1.5))  # Bobot kelas
# Prediksi dan Evaluasi
pred_svm3 <- predict(svm_model3, test_final)
conf_matrix_svm3 <- confusionMatrix(pred_svm3, test_final$stunting)
# Hasil model svm
print(svm_model3)
print(conf_matrix_svm3)
# Ekstrak confusion matrix dari caret
cm_svmmodel3 <- as.data.frame(conf_matrix_svm3$table)
# Ganti nama kolom supaya konsisten
colnames(cm_svmmodel3) <- c("Prediction", "Reference", "Freq")
# Plot pakai ggplot2
ggplot(cm_svmmodel3, aes(x = Reference, y = Prediction, fill = Freq)) +
geom_tile(color = "black") +
geom_text(aes(label = Freq), size = 6) +
scale_fill_gradient(low = "white", high = "skyblue") +
labs(
title = "Confusion Matrix - svm_model3",
x = "Actual (Reference)",
y = "Predicted",
fill = "Count"
) +
theme_minimal() +
coord_fixed()
print(rf_model1)
# Model default
set.seed(123)
rf_model1 <- randomForest(stunting ~ ., data = train_final,
ntree = 200,
mtry = floor(sqrt(ncol(train_final)-1)),
nodesize = 10,
maxnodes = 20,
importance = TRUE)
# Prediksi & evaluasi
pred_rf1 <- predict(rf_model1, test_final)
conf_matrix_rf1 <- confusionMatrix(pred_rf1, test_final$stunting)
## hasil
print(rf_model1)
print(conf_matrix_rf1)
# Ekstrak confusion matrix dari caret
cm_rfmodel1 <- as.data.frame(conf_matrix_rf1$table)
# Ganti nama kolom supaya konsisten
colnames(cm_rfmodel1) <- c("Prediction", "Reference", "Freq")
# Plot pakai ggplot2
ggplot(cm_rfmodel1, aes(x = Reference, y = Prediction, fill = Freq)) +
geom_tile(color = "black") +
geom_text(aes(label = Freq), size = 6) +
scale_fill_gradient(low = "white", high = "skyblue") +
labs(
title = "Confusion Matrix - rf_model1",
x = "Actual (Reference)",
y = "Predicted",
fill = "Count"
) +
theme_minimal() +
coord_fixed()
# Plot pakai ggplot2
ggplot(cm_rfmodel1, aes(x = Reference, y = Prediction, fill = Freq)) +
geom_tile(color = "black") +
geom_text(aes(label = Freq), size = 6) +
scale_fill_gradient(low = "white", high = "skyblue") +
labs(
title = "Confusion Matrix - rf_model1",
x = "Actual (Reference)",
y = "Predicted",
fill = "Count"
) +
theme_minimal() +
coord_fixed()
print(rf_model2)
# Plot pakai ggplot2
ggplot(cm_rfmodel2, aes(x = Reference, y = Prediction, fill = Freq)) +
geom_tile(color = "black") +
geom_text(aes(label = Freq), size = 6) +
scale_fill_gradient(low = "white", high = "skyblue") +
labs(
title = "Confusion Matrix - rf_model2",
x = "Actual (Reference)",
y = "Predicted",
fill = "Count"
) +
theme_minimal() +
coord_fixed()
table(train_final$stunting)
## hasil
print(rf_model3)
# Plot pakai ggplot2
ggplot(cm_rfmodel3, aes(x = Reference, y = Prediction, fill = Freq)) +
geom_tile(color = "black") +
geom_text(aes(label = Freq), size = 6) +
scale_fill_gradient(low = "white", high = "skyblue") +
labs(
title = "Confusion Matrix - rf_model3",
x = "Actual (Reference)",
y = "Predicted",
fill = "Count"
) +
theme_minimal() +
coord_fixed()
# Plot pakai ggplot2
ggplot(cm_rfmodel1, aes(x = Reference, y = Prediction, fill = Freq)) +
geom_tile(color = "black") +
geom_text(aes(label = Freq), size = 6) +
scale_fill_gradient(low = "white", high = "skyblue") +
labs(
title = "Confusion Matrix - rf_model1",
x = "Actual (Reference)",
y = "Predicted",
fill = "Count"
) +
theme_minimal() +
coord_fixed()
# Hasil model svm
print(svm_model1)
# Plot pakai ggplot2
ggplot(cm_svmmodel1, aes(x = Reference, y = Prediction, fill = Freq)) +
geom_tile(color = "black") +
geom_text(aes(label = Freq), size = 6) +
scale_fill_gradient(low = "white", high = "skyblue") +
labs(
title = "Confusion Matrix - svm_model1",
x = "Actual (Reference)",
y = "Predicted",
fill = "Count"
) +
theme_minimal() +
coord_fixed()
