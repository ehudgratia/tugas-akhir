# Visualisasi Correlation Matrix
library(ggcorrplot)
library(ranger)
library(randomForest)
library(pROC)
library(boot)
library(caTools)
library(e1071)
library(reshape2)
library(iml)
library(mlr)
library(FSelectorRcpp)
# skenario 3 = Regularisasi Ekstrem cost besar, gamma kecil (margin ketat, kompleksitas tinggi)
svm_model_radial3 <-svm(stunting ~., data = data_train,
kernel='radial',
cost = 100,
gamma = 0.1)
# Prediksi
pred_radial3 <- predict(svm_model_radial3, data_test)
# Evaluasi
conf_matrix_radial3 <- confusionMatrix(pred_radial3, data_test$stunting)
# Hasil
print(svm_model_radial3)
print(conf_matrix_radial3)
metrics_svm_terbaik <- bind_rows(
tibble(Model = "Radial 1",
Metric = c("Precision", "Recall", "F1", "Accuracy"),
Value = c(conf_matrix_radial$byClass[c("Precision", "Recall", "F1")],
conf_matrix_radial$overall["Accuracy"])),
tibble(Model = "Radial 2",
Metric = c("Precision", "Recall", "F1", "Accuracy"),
Value = c(conf_matrix_radial2$byClass[c("Precision", "Recall", "F1")],
conf_matrix_radial2$overall["Accuracy"])),
tibble(Model = "Radial 3",
Metric = c("Precision", "Recall", "F1", "Accuracy"),
Value = c(conf_matrix_radial3$byClass[c("Precision", "Recall", "F1")],
conf_matrix_radial3$overall["Accuracy"])))
# Visualisasi
ggplot(metrics_svm_terbaik, aes(x = Metric, y = Value, fill = Model)) +
geom_bar(stat = "identity", position = position_dodge(0.8), width = 0.7) +
geom_text(aes(label = round(Value, 3)),
position = position_dodge(0.8),
vjust = -0.5,
size = 3) +
labs(title = "Perbandingan Model Terbaik SVM",
y = "Nilai Metrik",
x = "Metrix Evaluasi",
fill = "Kernel") +
theme_minimal()
metrics_svm_terbaik <- bind_rows(
tibble(Model = "Radial 1",
Metric = c("Precision", "Recall", "F1", "Accuracy"),
Value = c(conf_matrix_radial$byClass[c("Precision", "Recall", "F1")],
conf_matrix_radial$overall["Accuracy"])),
tibble(Model = "Radial 2",
Metric = c("Precision", "Recall", "F1", "Accuracy"),
Value = c(conf_matrix_radial2$byClass[c("Precision", "Recall", "F1")],
conf_matrix_radial2$overall["Accuracy"])),
tibble(Model = "Radial 3",
Metric = c("Precision", "Recall", "F1", "Accuracy"),
Value = c(conf_matrix_radial3$byClass[c("Precision", "Recall", "F1")],
conf_matrix_radial3$overall["Accuracy"])))
# Visualisasi
ggplot(metrics_svm_terbaik, aes(x = Metric, y = Value, fill = Model)) +
geom_bar(stat = "identity", position = position_dodge(0.8), width = 0.7) +
geom_text(aes(label = round(Value, 3)),
position = position_dodge(0.8),
vjust = -0.5,
size = 3) +
labs(title = "Perbandingan Model Terbaik SVM",
y = "Nilai Metrik",
x = "Metrix Evaluasi",
fill = "Kernel") +
theme_minimal()
View(conf_matrix_rf3)
svm_model_radial <-svm(stunting ~., data = data_train, kernel='radial')
svm_model_radial <-svm(stunting ~., data = data_train, kernel='radial')
pred_radial <- predict(svm_model_radial, data_test)
pred_radial <- predict(svm_model_radial, data_test)
conf_matrix_radial <- confusionMatrix(pred_radial, data_test$stunting)
svm_model_radial2 <-svm(stunting ~., data = data_train,
kernel='radial',
cost = 10,
gamma = 0.1)
svm_model_radial2 <-svm(stunting ~., data = data_train,
kernel='radial',
cost = 10,
gamma = 0.1)
pred_radial2 <- predict(svm_model_radial2, data_test)
conf_matrix_radial2 <- confusionMatrix(pred_radial2, data_test$stunting)
metrics_svm_terbaik <- bind_rows(
tibble(Model = "Radial 1",
Metric = c("Precision", "Recall", "F1", "Accuracy"),
Value = c(conf_matrix_radial$byClass[c("Precision", "Recall", "F1")],
conf_matrix_radial$overall["Accuracy"])),
tibble(Model = "Radial 2",
Metric = c("Precision", "Recall", "F1", "Accuracy"),
Value = c(conf_matrix_radial2$byClass[c("Precision", "Recall", "F1")],
conf_matrix_radial2$overall["Accuracy"])),
tibble(Model = "Radial 3",
Metric = c("Precision", "Recall", "F1", "Accuracy"),
Value = c(conf_matrix_radial3$byClass[c("Precision", "Recall", "F1")],
conf_matrix_radial3$overall["Accuracy"])))
# Visualisasi
ggplot(metrics_svm_terbaik, aes(x = Metric, y = Value, fill = Model)) +
geom_bar(stat = "identity", position = position_dodge(0.8), width = 0.7) +
geom_text(aes(label = round(Value, 3)),
position = position_dodge(0.8),
vjust = -0.5,
size = 3) +
labs(title = "Perbandingan Model Terbaik SVM",
y = "Nilai Metrik",
x = "Metrix Evaluasi",
fill = "Kernel") +
theme_minimal()
# Visualisasi
ggplot(metrics_svm_terbaik, aes(x = Metric, y = Value, fill = Model)) +
geom_bar(stat = "identity", position = position_dodge(0.8), width = 0.7) +
geom_text(aes(label = round(Value, 3)),
position = position_dodge(0.8),
vjust = -0.5,
size = 3) +
labs(title = "Perbandingan Model SVM Terbaik Setiap Skenario",
y = "Nilai Metrik",
x = "Metrix Evaluasi",
fill = "Kernel") +
theme_minimal()
print(svm_model_radial)
# Latih Model default
set.seed(123)
rf_model1a <- randomForest(stunting ~ ., data = data_train,
ntree = 1000,
nodesize = 10,
maxnodes = 30)
rf_model1b <- randomForest(stunting ~ ., data = data_train,
ntree = 500,
nodesize = 10,
maxnodes = 30)
rf_model1c <- randomForest(stunting ~ ., data = data_train,
ntree = 100,
nodesize = 10,
maxnodes = 30)
# Prediksi & evaluasi
pred_rf1a <- predict(rf_model1a, data_test)
pred_rf1b <- predict(rf_model1b, data_test)
pred_rf1c <- predict(rf_model1c, data_test)
conf_matrix_rf1a <- confusionMatrix(pred_rf1a, data_test$stunting)
conf_matrix_rf1b <- confusionMatrix(pred_rf1b, data_test$stunting)
conf_matrix_rf1c <- confusionMatrix(pred_rf1c, data_test$stunting)
## hasil
print(rf_model1a)
print(conf_matrix_rf1a)
print(rf_model1b)
print(conf_matrix_rf1b)
print(rf_model1c)
print(conf_matrix_rf1c)
# Visualisasi Confusion Matrix
# Ekstrak confusion matrix dari caret
cm_rfmodel1a <- as.data.frame(conf_matrix_rf1a$table)
cm_rfmodel1b <- as.data.frame(conf_matrix_rf1b$table)
cm_rfmodel1c <- as.data.frame(conf_matrix_rf1c$table)
# Visualisasi
ggplot(cm_rfmodel1a, aes(x = Reference, y = Prediction, fill = Freq)) +
geom_tile(color = "black") +
geom_text(aes(label = Freq), size = 6) +
scale_fill_gradient(low = "white", high = "skyblue") +
labs(
title = "Confusion Matrix - rf_model1a",
x = "Actual (Reference)",
y = "Predicted",
fill = "Count"
) +
theme_minimal() +
coord_fixed()
# Rf 2
# menambahkan parameter mtry
set.seed(123)
rf_model2a <- randomForest(stunting ~ ., data = data_train,
ntree = 100,
nodesize = 10,
maxnodes = 30,
mtry = floor(ncol(data_train)/3))
rf_model2b <- randomForest(stunting ~ ., data = data_train,
ntree = 100,
nodesize = 10,
maxnodes = 30,
mtry = floor(sqrt(ncol(data_train))))
rf_model2c <- randomForest(stunting ~ ., data = data_train,
ntree = 100,
nodesize = 10,
maxnodes = 30,
mtry = floor(log2(ncol(data_train))))
# Prediksi & evaluasi
pred_rf2a <- predict(rf_model2a, data_test)
pred_rf2b <- predict(rf_model2b, data_test)
pred_rf2c <- predict(rf_model2c, data_test)
conf_matrix_rf2a <- confusionMatrix(pred_rf2a, data_test$stunting)
conf_matrix_rf2b <- confusionMatrix(pred_rf2b, data_test$stunting)
conf_matrix_rf2c <- confusionMatrix(pred_rf2c, data_test$stunting)
## hasil
print(rf_model2a)
print(conf_matrix_rf2a)
print(rf_model2b)
print(conf_matrix_rf2b)
print(rf_model2c)
print(conf_matrix_rf2c)
# Ekstrak confusion matrix dari caret
cm_rfmodel2a <- as.data.frame(conf_matrix_rf2a$table)
cm_rfmodel2b <- as.data.frame(conf_matrix_rf2b$table)
cm_rfmodel2c <- as.data.frame(conf_matrix_rf2c$table)
# Visualisasi
ggplot(cm_rfmodel2c, aes(x = Reference, y = Prediction, fill = Freq)) +
geom_tile(color = "black") +
geom_text(aes(label = Freq), size = 6) +
scale_fill_gradient(low = "white", high = "skyblue") +
labs(
title = "Confusion Matrix - rf_model2c",
x = "Actual (Reference)",
y = "Predicted",
fill = "Count"
) +
theme_minimal() +
coord_fixed()
# RF 3
# menambahkan parameter sampsize
set.seed(123)
rf_model3a <- randomForest(stunting ~ ., data = data_train,
ntree = 100,
nodesize = 10,
maxnodes = 30,
mtry = floor(ncol(data_train)/3),
sampsize = 0.9 * nrow(data_train))
rf_model3b <- randomForest(stunting ~ ., data = data_train,
ntree = 100,
nodesize = 10,
maxnodes = 30,
mtry = floor(sqrt(ncol(data_train))),
sampsize = 0.7 * nrow(data_train))
rf_model3c <- randomForest(stunting ~ ., data = data_train,
ntree = 100,
nodesize = 10,
maxnodes = 30,
mtry = floor(log2(ncol(data_train))),
sampsize = 0.5 * nrow(data_train))
# Prediksi & evaluasi
pred_rf3a <- predict(rf_model3a, data_test)
pred_rf3b <- predict(rf_model3b, data_test)
pred_rf3c <- predict(rf_model3c, data_test)
conf_matrix_rf3a <- confusionMatrix(pred_rf3a, data_test$stunting)
conf_matrix_rf3b <- confusionMatrix(pred_rf3b, data_test$stunting)
conf_matrix_rf3c <- confusionMatrix(pred_rf3c, data_test$stunting)
## hasil
print(rf_model3a)
print(conf_matrix_rf3a)
print(rf_model3b)
print(conf_matrix_rf3b)
print(rf_model3c)
print(conf_matrix_rf3c)
# Ekstrak confusion matrix dari caret
cm_rfmodel3a <- as.data.frame(conf_matrix_rf3a$table)
cm_rfmodel3b <- as.data.frame(conf_matrix_rf3b$table)
cm_rfmodel3c <- as.data.frame(conf_matrix_rf3c$table)
# Plot pakai ggplot2
ggplot(cm_rfmodel3c, aes(x = Reference, y = Prediction, fill = Freq)) +
geom_tile(color = "black") +
geom_text(aes(label = Freq), size = 6) +
scale_fill_gradient(low = "white", high = "skyblue") +
labs(
title = "Confusion Matrix - rf_model3c",
x = "Actual (Reference)",
y = "Predicted",
fill = "Count"
) +
theme_minimal() +
coord_fixed()
metrics_model_terbaik <- bind_rows(
tibble(Model = "RF",
Metric = c("Precision", "Recall", "F1", "Accuracy"),
Value = c(conf_matrix_rf3c$byClass[c("Precision", "Recall", "F1")],
conf_matrix_rf3c$overall["Accuracy"])),
tibble(Model = "SVM",
Metric = c("Precision", "Recall", "F1", "Accuracy"),
Value = c(conf_matrix_radial2$byClass[c("Precision", "Recall", "F1")],
conf_matrix_radial2$overall["Accuracy"])))
# Visualisasi
ggplot(metrics_model_terbaik, aes(x = Metric, y = Value, fill = Model)) +
geom_col(position = position_dodge(width = 0.7), width = 0.6) +
geom_text(aes(label = round(Value, 3)),
position = position_dodge(width = 0.7),
vjust = -0.5, size = 3) +
scale_fill_manual(values = c("RF" = "#1b9e77", "SVM" = "#d95f02")) +
labs(title = "Perbandingan Kinerja RF vs SVM",
y = "Nilai Metrik",
x = "Metrik Evaluasi") +
theme_minimal()
metrics_model_terbaik <- bind_rows(
tibble(Model = "RF",
Metric = c("Precision", "Recall", "F1", "Accuracy"),
Value = c(conf_matrix_rf3c$byClass[c("Precision", "Recall", "F1")],
conf_matrix_rf3c$overall["Accuracy"])),
tibble(Model = "SVM",
Metric = c("Precision", "Recall", "F1", "Accuracy"),
Value = c(conf_matrix_radial3$byClass[c("Precision", "Recall", "F1")],
conf_matrix_radial3$overall["Accuracy"])))
# Visualisasi
ggplot(metrics_model_terbaik, aes(x = Metric, y = Value, fill = Model)) +
geom_col(position = position_dodge(width = 0.7), width = 0.6) +
geom_text(aes(label = round(Value, 3)),
position = position_dodge(width = 0.7),
vjust = -0.5, size = 3) +
scale_fill_manual(values = c("RF" = "#1b9e77", "SVM" = "#d95f02")) +
labs(title = "Perbandingan Kinerja RF vs SVM",
y = "Nilai Metrik",
x = "Metrik Evaluasi") +
theme_minimal()
metrics_model_terbaik <- bind_rows(
tibble(Model = "RF",
Metric = c("Precision", "Recall", "F1", "Accuracy"),
Value = c(conf_matrix_rf3c$byClass[c("Precision", "Recall", "F1")],
conf_matrix_rf3c$overall["Accuracy"])),
tibble(Model = "SVM",
Metric = c("Precision", "Recall", "F1", "Accuracy"),
Value = c(conf_matrix_radial3$byClass[c("Precision", "Recall", "F1")],
conf_matrix_radial3$overall["Accuracy"])))
# Visualisasi
ggplot(metrics_model_terbaik, aes(x = Metric, y = Value, fill = Model)) +
geom_col(position = position_dodge(width = 0.7), width = 0.6) +
geom_text(aes(label = round(Value, 3)),
position = position_dodge(width = 0.7),
vjust = -0.5, size = 3) +
scale_fill_manual(values = c("RF" = "#1b9e77", "SVM" = "#d95f02")) +
labs(title = "Perbandingan Kinerja RF vs SVM",
y = "Nilai Metrik",
x = "Metrik Evaluasi") +
theme_minimal()
View(conf_matrix_radial3)
# Buat objek prediktor SVM
predictor_svm <- Predictor$new(
model = svm_model_radial3,
data = data_test[, -which(names(data_test) == "stunting")],
y = data_test$stunting
)
# Melakukan Permutation importance
imp_svm <- FeatureImp$new(predictor_svm, loss = "ce", compare = "difference")
plot(imp_svm)
# Ambil hasil importance dari model
df_svm <- as.data.frame(imp_svm$results)
# Visualisasi importance
ggplot(df_svm, aes(x = reorder(feature, importance), y = importance)) +
geom_point(stat = "identity", fill = "blue") +
coord_flip() +
labs(
title = "Feature Importance SVM",
x = "Fitur",
y = "Importance (Penurunan Akurasi)"
) +
theme_minimal()
# Visualisasi
# Gabungkan semua metrik ke dalam satu tibble
metrics_rf3 <- bind_rows(
tibble(Model = "sampsize 0.9",
Metric = c("Recall", "Precision", "F1", "Accuracy"),
Value = c(conf_matrix_rf3a$byClass[c("Precision", "Recall", "F1")],
conf_matrix_rf3a$overall["Accuracy"])),
tibble(Model = "sampsize 0.7",
Metric = c("Recall", "Precision", "F1", "Accuracy"),
Value = c(conf_matrix_rf3b$byClass[c("Precision", "Recall", "F1")],
conf_matrix_rf3b$overall["Accuracy"])),
tibble(Model = "sampsize 0.5",
Metric = c("Recall", "Precision", "F1", "Accuracy"),
Value = c(conf_matrix_rf3c$byClass[c("Precision", "Recall", "F1")],
conf_matrix_rf3c$overall["Accuracy"]))
)
# Visualisasi
ggplot(metrics_rf3, aes(x = Metric, y = Value, fill = Model)) +
geom_bar(stat = "identity", position = position_dodge(0.8), width = 0.7) +
geom_text(aes(label = round(Value, 3)),
position = position_dodge(0.8),
vjust = -0.5,
size = 3) +
labs(title = "Perbandingan Model Random Forest",
y = "Nilai Metrik",
x = "Metrix Evaluasi",
fill = "Model") +
theme_minimal()
# Visualisasi
ggplot(metrics_model_terbaik, aes(x = Metric, y = Value, fill = Model)) +
geom_col(position = position_dodge(width = 0.7), width = 0.6) +
geom_text(aes(label = round(Value, 3)),
position = position_dodge(width = 0.7),
vjust = -0.5, size = 3) +
scale_fill_manual(values = c("RF" = "#1b9e77", "SVM" = "#d95f02")) +
labs(title = "Perbandingan Kinerja RF vs SVM",
y = "Nilai Metrik",
x = "Metrik Evaluasi") +
theme_minimal()
# Visualisasi importance
ggplot(df_svm, aes(x = reorder(feature, importance), y = importance)) +
geom_point(stat = "identity", fill = "blue") +
coord_flip() +
labs(
title = "Feature Importance SVM",
x = "Fitur",
y = "Importance (Penurunan Akurasi)"
) +
theme_minimal()
# Visualisasi importance
ggplot(df_svm, aes(x = reorder(feature, importance), y = importance)) +
geom_bar(stat = "identity", fill = "blue") +
coord_flip() +
labs(
title = "Feature Importance SVM",
x = "Fitur",
y = "Importance (Penurunan Akurasi)"
) +
theme_minimal()
View(df_svm)
library(yardstick)
library(dplyr)
# Fungsi permutation importance untuk kelas 1
perm_importance_class1 <- function(model, data_test, target_var, metric = "recall") {
# Cek target
y_true <- data_test[[target_var]]
if (!is.factor(y_true)) y_true <- as.factor(y_true)
# Prediksi awal
y_pred <- predict(model, data_test)
# Hitung baseline metrik (untuk kelas 1)
baseline <- recall_vec(truth = y_true, estimate = y_pred, estimator = "binary", event_level = "second")
# Simpan hasil importance
importance <- c()
# Variabel prediktor
features <- setdiff(names(data_test), target_var)
for (feature in features) {
permuted_data <- data_test
permuted_data[[feature]] <- sample(permuted_data[[feature]])
perm_pred <- predict(model, permuted_data)
perm_metric <- recall_vec(truth = y_true, estimate = perm_pred,
estimator = "binary", event_level = "second")
importance[feature] <- baseline - perm_metric
}
tibble(
Feature = names(importance),
Importance = importance
) %>%
arrange(desc(Importance))
}
install.packages("yardstick")
library(yardstick)
library(dplyr)
# Fungsi permutation importance untuk kelas 1
perm_importance_class1 <- function(model, data_test, target_var, metric = "recall") {
# Cek target
y_true <- data_test[[target_var]]
if (!is.factor(y_true)) y_true <- as.factor(y_true)
# Prediksi awal
y_pred <- predict(model, data_test)
# Hitung baseline metrik (untuk kelas 1)
baseline <- recall_vec(truth = y_true, estimate = y_pred, estimator = "binary", event_level = "second")
# Simpan hasil importance
importance <- c()
# Variabel prediktor
features <- setdiff(names(data_test), target_var)
for (feature in features) {
permuted_data <- data_test
permuted_data[[feature]] <- sample(permuted_data[[feature]])
perm_pred <- predict(model, permuted_data)
perm_metric <- recall_vec(truth = y_true, estimate = perm_pred,
estimator = "binary", event_level = "second")
importance[feature] <- baseline - perm_metric
}
tibble(
Feature = names(importance),
Importance = importance
) %>%
arrange(desc(Importance))
}
importance_radial3 <- perm_importance_class1(
model = svm_model_radial3,
data_test = data_test,
target_var = "stunting"
)
print(importance_radial3)
library(yardstick)
library(dplyr)
perm_importance_class1 <- function(model, data_test, target_var, metric = "recall") {
y_true <- data_test[[target_var]]
if (!is.factor(y_true)) y_true <- as.factor(y_true)
# Buat data prediksi tanpa kolom target
x_test <- data_test[, setdiff(names(data_test), target_var)]
# Baseline prediksi & metrik
y_pred <- predict(model, x_test)
baseline <- recall_vec(truth = y_true, estimate = y_pred, estimator = "binary", event_level = "second")
importance <- c()
for (feature in names(x_test)) {
permuted_x <- x_test
permuted_x[[feature]] <- sample(permuted_x[[feature]])
perm_pred <- predict(model, permuted_x)
perm_metric <- recall_vec(truth = y_true, estimate = perm_pred, estimator = "binary", event_level = "second")
importance[feature] <- baseline - perm_metric
}
tibble(
Feature = names(importance),
Importance = importance
) %>%
arrange(desc(Importance))
}
importance_radial3 <- perm_importance_class1(
model = svm_model_radial3,
data_test = data_test,
target_var = "stunting"
)
print(importance_radial3)
