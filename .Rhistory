# Prediksi & evaluasi
pred_rf2 <- predict(rf_model2, test_final)
conf_matrix_rf2 <- confusionMatrix(pred_rf2, test_final$stunting)
## hasil
print(rf_model2)
print(conf_matrix_rf2)
# Ekstrak confusion matrix dari caret
cm_rfmodel2 <- as.data.frame(conf_matrix_rf2$table)
# Ganti nama kolom supaya konsisten
colnames(cm_rfmodel2) <- c("Prediction", "Reference", "Freq")
# Plot pakai ggplot2
ggplot(cm_rfmodel2, aes(x = Reference, y = Prediction, fill = Freq)) +
geom_tile(color = "black") +
geom_text(aes(label = Freq), size = 6) +
scale_fill_gradient(low = "white", high = "skyblue") +
labs(
title = "Confusion Matrix - Random Forest",
x = "Actual (Reference)",
y = "Predicted",
fill = "Count"
) +
theme_minimal() +
coord_fixed()
# menggunakan parameter final1
set.seed(123)
rf_model_final2 <- randomForest(
stunting ~ .,
data = train_final1,
ntree = 100,           # Tambah jumlah pohon
mtry = floor(sqrt(ncol(train_final)-1)),  # mtry = akar(jumlah fitur)
nodesize = 10,         # Batasi ukuran node terminal
maxnodes = 20,         # Batasi kedalaman pohon
importance = TRUE
)
# Prediksi & evaluasi
pred_rf_final2 <- predict(rf_model_final2, test_final1)
conf_matrix_rf_final2 <- confusionMatrix(pred_rf_final2, test_final1$stunting)
## hasil
print(rf_model_final2)
print(conf_matrix_rf_final2)
View(cm_rfmodel2)
print(rf_model2)
print(conf_matrix_rf2)
# Ekstrak confusion matrix dari caret
cm_rfmodel2 <- as.data.frame(conf_matrix_rf2$table)
# Ganti nama kolom supaya konsisten
colnames(cm_rfmodel2) <- c("Prediction", "Reference", "Freq")
# Plot pakai ggplot2
ggplot(cm_rfmodel2, aes(x = Reference, y = Prediction, fill = Freq)) +
geom_tile(color = "black") +
geom_text(aes(label = Freq), size = 6) +
scale_fill_gradient(low = "white", high = "skyblue") +
labs(
title = "Confusion Matrix - Random Forest",
x = "Actual (Reference)",
y = "Predicted",
fill = "Count"
) +
theme_minimal() +
coord_fixed()
# Plot pakai ggplot2
ggplot(cm_rfmodel2, aes(x = Reference, y = Prediction, fill = Freq)) +
geom_tile(color = "black") +
geom_text(aes(label = Freq), size = 6) +
scale_fill_gradient(low = "white", high = "skyblue") +
labs(
title = "Confusion Matrix - rf2",
x = "Actual (Reference)",
y = "Predicted",
fill = "Count"
) +
theme_minimal() +
coord_fixed()
# Ekstrak confusion matrix dari caret
cm_rfmodel1 <- as.data.frame(conf_matrix_rf2$table)
# Ganti nama kolom supaya konsisten
colnames(cm_rfmodel1) <- c("Prediction", "Reference", "Freq")
# Plot pakai ggplot2
ggplot(cm_rfmodel1, aes(x = Reference, y = Prediction, fill = Freq)) +
geom_tile(color = "black") +
geom_text(aes(label = Freq), size = 6) +
scale_fill_gradient(low = "white", high = "skyblue") +
labs(
title = "Confusion Matrix - rf2",
x = "Actual (Reference)",
y = "Predicted",
fill = "Count"
) +
theme_minimal() +
coord_fixed()
# default
set.seed(123)
rf_model <- randomForest(stunting ~ ., data = train_final)
# Prediksi & evaluasi
pred_rf <- predict(rf_model, test_final)
conf_matrix_rf <- confusionMatrix(pred_rf, test_final$stunting)
## hasil
print(rf_model)
print(conf_matrix_rf)
# Ekstrak confusion matrix dari caret
cm_rfmodel1 <- as.data.frame(conf_matrix_rf2$table)
# Ganti nama kolom supaya konsisten
colnames(cm_rfmodel1) <- c("Prediction", "Reference", "Freq")
# Plot pakai ggplot2
ggplot(cm_rfmodel1, aes(x = Reference, y = Prediction, fill = Freq)) +
geom_tile(color = "black") +
geom_text(aes(label = Freq), size = 6) +
scale_fill_gradient(low = "white", high = "skyblue") +
labs(
title = "Confusion Matrix - rf1",
x = "Actual (Reference)",
y = "Predicted",
fill = "Count"
) +
theme_minimal() +
coord_fixed()
# Ekstrak confusion matrix dari caret
cm_rfmodel1 <- as.data.frame(conf_matrix_rf1$table)
# Ganti nama kolom supaya konsisten
colnames(cm_rfmodel1) <- c("Prediction", "Reference", "Freq")
# Plot pakai ggplot2
ggplot(cm_rfmodel1, aes(x = Reference, y = Prediction, fill = Freq)) +
geom_tile(color = "black") +
geom_text(aes(label = Freq), size = 6) +
scale_fill_gradient(low = "white", high = "skyblue") +
labs(
title = "Confusion Matrix - rf1",
x = "Actual (Reference)",
y = "Predicted",
fill = "Count"
) +
theme_minimal() +
coord_fixed()
# Ekstrak confusion matrix dari caret
cm_rfmodel <- as.data.frame(conf_matrix_rf$table)
# Ganti nama kolom supaya konsisten
colnames(cm_rfmodel) <- c("Prediction", "Reference", "Freq")
# Plot pakai ggplot2
ggplot(cm_rfmodel, aes(x = Reference, y = Prediction, fill = Freq)) +
geom_tile(color = "black") +
geom_text(aes(label = Freq), size = 6) +
scale_fill_gradient(low = "white", high = "skyblue") +
labs(
title = "Confusion Matrix - rf1",
x = "Actual (Reference)",
y = "Predicted",
fill = "Count"
) +
theme_minimal() +
coord_fixed()
print(conf_matrix_rf)
View(cm_rfmodel)
# Ekstrak confusion matrix dari caret
cm_svmmodel <- as.data.frame(conf_matrix_svm$table)
# Ganti nama kolom supaya konsisten
colnames(cm_svmmodel) <- c("Prediction", "Reference", "Freq")
# Plot pakai ggplot2
ggplot(cm_svmmodel, aes(x = Reference, y = Prediction, fill = Freq)) +
geom_tile(color = "black") +
geom_text(aes(label = Freq), size = 6) +
scale_fill_gradient(low = "white", high = "skyblue") +
labs(
title = "Confusion Matrix - rf2",
x = "Actual (Reference)",
y = "Predicted",
fill = "Count"
) +
theme_minimal() +
coord_fixed()
# Plot pakai ggplot2
ggplot(cm_svmmodel, aes(x = Reference, y = Prediction, fill = Freq)) +
geom_tile(color = "black") +
geom_text(aes(label = Freq), size = 6) +
scale_fill_gradient(low = "white", high = "skyblue") +
labs(
title = "Confusion Matrix - svm1",
x = "Actual (Reference)",
y = "Predicted",
fill = "Count"
) +
theme_minimal() +
coord_fixed()
print(conf_matrix_svm)
print(conf_matrix_rf2)
# Hasil model svm
print(svm_model2)
# Hasil model svm
print(svm_model)
# Ekstrak confusion matrix dari caret
cm_svmmodel2 <- as.data.frame(conf_matrix_svm2$table)
# Ganti nama kolom supaya konsisten
colnames(cm_svmmodel2) <- c("Prediction", "Reference", "Freq")
# Plot pakai ggplot2
ggplot(cm_svmmodel2, aes(x = Reference, y = Prediction, fill = Freq)) +
geom_tile(color = "black") +
geom_text(aes(label = Freq), size = 6) +
scale_fill_gradient(low = "white", high = "skyblue") +
labs(
title = "Confusion Matrix - svm1",
x = "Actual (Reference)",
y = "Predicted",
fill = "Count"
) +
theme_minimal() +
coord_fixed()
ggplot(cm_svmmodel2, aes(x = Reference, y = Prediction, fill = Freq)) +
geom_tile(color = "black") +
geom_text(aes(label = Freq), size = 6) +
scale_fill_gradient(low = "white", high = "skyblue") +
labs(
title = "Confusion Matrix - svm_model2",
x = "Actual (Reference)",
y = "Predicted",
fill = "Count"
) +
theme_minimal() +
coord_fixed()
```
# Plot pakai ggplot2
ggplot(cm_rfmodel, aes(x = Reference, y = Prediction, fill = Freq)) +
geom_tile(color = "black") +
geom_text(aes(label = Freq), size = 6) +
scale_fill_gradient(low = "white", high = "skyblue") +
labs(
title = "Confusion Matrix - rf_model",
x = "Actual (Reference)",
y = "Predicted",
fill = "Count"
) +
theme_minimal() +
coord_fixed()
ggplot(cm_rfmodel2, aes(x = Reference, y = Prediction, fill = Freq)) +
geom_tile(color = "black") +
geom_text(aes(label = Freq), size = 6) +
scale_fill_gradient(low = "white", high = "skyblue") +
labs(
title = "Confusion Matrix - rf_model2",
x = "Actual (Reference)",
y = "Predicted",
fill = "Count"
) +
theme_minimal() +
coord_fixed()
# Plot pakai ggplot2
ggplot(cm_svmmodel, aes(x = Reference, y = Prediction, fill = Freq)) +
geom_tile(color = "black") +
geom_text(aes(label = Freq), size = 6) +
scale_fill_gradient(low = "white", high = "skyblue") +
labs(
title = "Confusion Matrix - svm_model",
x = "Actual (Reference)",
y = "Predicted",
fill = "Count"
) +
theme_minimal() +
coord_fixed()
# Plot pakai ggplot2
ggplot(cm_svmmodel2, aes(x = Reference, y = Prediction, fill = Freq)) +
geom_tile(color = "black") +
geom_text(aes(label = Freq), size = 6) +
scale_fill_gradient(low = "white", high = "skyblue") +
labs(
title = "Confusion Matrix - svm_model2",
x = "Actual (Reference)",
y = "Predicted",
fill = "Count"
) +
theme_minimal() +
coord_fixed()
# Ambil koefisien svm
coefs <- t(svm_model$coefs) %*% svm_model$SV
importance <- as.vector(coefs)
features <- names(data_train)[-which(names(data_train) == "stunting")]
# Buat dataframe untuk visualisasi
importance_df <- data.frame(
Feature = features,
Importance = abs(importance)
)
# Feature Importance dari model Random Forest
importance_rf <- as.data.frame(importance_rf(rf_model3))
importance_rf <- importance_rf[order(-importance_rf$MeanDecreaseGini), , drop=FALSE]
print(importance_rf)
# Visualisasi
ggplot(importance_rf, aes(x = reorder(row.names(importance), MeanDecreaseGini), y = MeanDecreaseGini)) +
geom_bar(stat = "identity", fill = "blue") +
coord_flip() +
labs(title = "Feature Importance - Random Forest",
x = "Faktor Sosioekonomi",
y = "Tingkat Kepentingan")+
theme_minimal()
# Feature Importance dari model Random Forest
importance_rf <- as.data.frame(importance_rf(rf_model3))
importance_rf <- importance_rf[order(-importance_rf$MeanDecreaseGini), , drop=FALSE]
print(importance_rf)
# Visualisasi
ggplot(importance_rf, aes(x = reorder(row.names(importance_rf), MeanDecreaseGini), y = MeanDecreaseGini)) +
geom_bar(stat = "identity", fill = "blue") +
coord_flip() +
labs(title = "Feature Importance - Random Forest",
x = "Faktor Sosioekonomi",
y = "Tingkat Kepentingan")+
theme_minimal()
# Feature Importance dari model Random Forest
importance_rf <- as.data.frame(importance_rf(rf_model2))
importance_rf <- importance_rf[order(-importance_rf$MeanDecreaseGini), , drop=FALSE]
print(importance_rf)
# Visualisasi
ggplot(importance_rf, aes(x = reorder(row.names(importance_rf), MeanDecreaseGini), y = MeanDecreaseGini)) +
geom_bar(stat = "identity", fill = "blue") +
coord_flip() +
labs(title = "Feature Importance - Random Forest",
x = "Faktor Sosioekonomi",
y = "Tingkat Kepentingan")+
theme_minimal()
# Feature Importance dari model Random Forest
importance <- as.data.frame(importance(rf_model2))
importance <- importance[order(-importance$MeanDecreaseGini), , drop=FALSE]
print(importance)
# Visualisasi
ggplot(importance, aes(x = reorder(row.names(importance), MeanDecreaseGini), y = MeanDecreaseGini)) +
geom_bar(stat = "identity", fill = "blue") +
coord_flip() +
labs(title = "Feature Importance - Random Forest",
x = "Faktor Sosioekonomi",
y = "Tingkat Kepentingan")+
theme_minimal()
# Ambil koefisien svm
coefs <- t(svm_model$coefs) %*% svm_model$SV
importance <- as.vector(coefs)
features <- names(data_train)[-which(names(data_train) == "stunting")]
# Buat dataframe untuk visualisasi
importance_df <- data.frame(
Feature = features,
Importance = abs(importance)
)
# --- Extract Metrics ---
metrics_rf <- conf_matrix_rf$byClass[c("Precision", "Recall", "F1")]
accuracy_rf <- conf_matrix_rf$overall["Accuracy"]
metrics_svm <- conf_matrix_svm$byClass[c("Precision", "Recall", "F1")]
accuracy_svm <- conf_matrix_svm$overall["Accuracy"]
# --- Combine into a tidy data frame ---
metrics_df <- tibble(
Metric = c("Accuracy", "Precision", "Recall", "F1-score"),
RF = c(accuracy_rf, metrics_rf),
SVM = c(accuracy_svm, metrics_svm)
) %>%
pivot_longer(cols = c(RF, SVM), names_to = "Model", values_to = "Value")
# --- Visualization ---
ggplot(metrics_df, aes(x = Metric, y = Value, fill = Model)) +
geom_col(position = position_dodge(width = 0.7), width = 0.6) +
geom_text(aes(label = round(Value, 3)),
position = position_dodge(width = 0.7),
vjust = -0.5, size = 3) +
scale_fill_manual(values = c("RF" = "#1b9e77", "SVM" = "#d95f02")) +
labs(title = "Perbandingan Kinerja Model RF vs SVM",
y = "Nilai Metrik", x = "Metrik Evaluasi") +
theme_minimal()
ggplot(metrics_df, aes(x = Metric, y = Value, fill = Model)) +
geom_col(position = position_dodge(width = 0.7), width = 0.6) +
geom_text(aes(label = round(Value, 3)),
position = position_dodge(width = 0.7),
vjust = -0.5, size = 3) +
scale_fill_manual(values = c("RF" = "#1b9e77", "SVM" = "#d95f02")) +
labs(title = "Perbandingan Kinerja Model rf_model vs svm_model",
y = "Nilai Metrik", x = "Metrik Evaluasi") +
theme_minimal()
print(conf_matrix_svm)
View(metrics_df)
# Extract Metrics
metrics_rf2 <- conf_matrix_rf2$byClass[c("Precision", "Recall", "F1")]
accuracy_rf2 <- conf_matrix_rf2$overall["Accuracy"]
metrics_svm2 <- conf_matrix_svm2$byClass[c("Precision", "Recall", "F1")]
accuracy_svm2 <- conf_matrix_svm2$overall["Accuracy"]
# satukan datata
metrics_df2 <- tibble(
Metric = c("Accuracy", "Precision", "Recall", "F1-score"),
RF = c(accuracy_rf, metrics_rf),
SVM = c(accuracy_svm, metrics_svm)
) %>%
pivot_longer(cols = c(RF, SVM), names_to = "Model", values_to = "Value")
# Visualisasi
ggplot(metrics_df, aes(x = Metric, y = Value, fill = Model)) +
geom_col(position = position_dodge(width = 0.7), width = 0.6) +
geom_text(aes(label = round(Value, 3)),
position = position_dodge(width = 0.7),
vjust = -0.5, size = 3) +
scale_fill_manual(values = c("RF" = "#1b9e77", "SVM" = "#d95f02")) +
labs(title = "Perbandingan Kinerja Model rf_model2 vs svm_model2",
y = "Nilai Metrik", x = "Metrik Evaluasi") +
theme_minimal()
# Visualisasi
ggplot(metrics_df2, aes(x = Metric, y = Value, fill = Model)) +
geom_col(position = position_dodge(width = 0.7), width = 0.6) +
geom_text(aes(label = round(Value, 3)),
position = position_dodge(width = 0.7),
vjust = -0.5, size = 3) +
scale_fill_manual(values = c("RF" = "#1b9e77", "SVM" = "#d95f02")) +
labs(title = "Perbandingan Kinerja Model rf_model2 vs svm_model2",
y = "Nilai Metrik", x = "Metrik Evaluasi") +
theme_minimal()
# Extract Metrics
metrics_rf2 <- conf_matrix_rf2$byClass[c("Precision", "Recall", "F1")]
accuracy_rf2 <- conf_matrix_rf2$overall["Accuracy"]
metrics_svm2 <- conf_matrix_svm2$byClass[c("Precision", "Recall", "F1")]
accuracy_svm2 <- conf_matrix_svm2$overall["Accuracy"]
# satukan datata
metrics_df2 <- tibble(
Metric = c("Accuracy", "Precision", "Recall", "F1-score"),
RF = c(accuracy_rf2, metrics_rf2),
SVM = c(accuracy_svm2, metrics_svm2)
) %>%
pivot_longer(cols = c(RF, SVM), names_to = "Model", values_to = "Value")
# Visualisasi
ggplot(metrics_df2, aes(x = Metric, y = Value, fill = Model)) +
geom_col(position = position_dodge(width = 0.7), width = 0.6) +
geom_text(aes(label = round(Value, 3)),
position = position_dodge(width = 0.7),
vjust = -0.5, size = 3) +
scale_fill_manual(values = c("RF" = "#1b9e77", "SVM" = "#d95f02")) +
labs(title = "Perbandingan Kinerja Model rf_model2 vs svm_model2",
y = "Nilai Metrik", x = "Metrik Evaluasi") +
theme_minimal()
# Feature Importance from RF
rf_imp <- importance(rf_model, type = 1) # MeanDecreaseAccuracy
rf_imp_df <- as_tibble(rf_imp, rownames = "Feature") %>%
rename(Importance = MeanDecreaseAccuracy) %>%
mutate(Model = "Random Forest")
rf_imp <- importance(rf_model)
print(rf_imp)
# --- Importance dari Random Forest ---
rf_imp <- importance(rf_model)
rf_imp_df <- as.data.frame(rf_imp) %>%
rownames_to_column("Feature") %>%
rename(Importance = MeanDecreaseGini) %>%
mutate(Model = "Random Forest")
# --- Importance dari SVM ---
svm_imp <- varImp(svm_model, scale = TRUE)$importance
svm_imp_df <- as_tibble(svm_imp, rownames = "Feature") %>%
rename(Importance = Overall) %>%
mutate(Model = "SVM (Linear Kernel)")
# --- Gabungkan keduanya ---
imp_combined <- bind_rows(rf_imp_df, svm_imp_df)
# --- Visualisasi gabungan ---
ggplot(imp_combined, aes(x = fct_reorder(Feature, Importance), y = Importance, fill = Model)) +
geom_col(position = "dodge", width = 0.6) +
coord_flip() +
labs(title = "Perbandingan Feature Importance: Random Forest vs SVM",
x = "Fitur", y = "Importance") +
scale_fill_manual(values = c("Random Forest" = "#1b9e77", "SVM (Linear Kernel)" = "#d95f02")) +
theme_minimal()
imp_combined <- bind_rows(rf_imp_df, svm_imp_df)
# --- Importance dari SVM ---
svm_imp <- varImp(svm_model, scale = TRUE)$importance
svm_imp_df <- as_tibble(svm_imp, rownames = "Feature") %>%
rename(Importance = Overall) %>%
mutate(Model = "SVM (Linear Kernel)")
# --- Importance dari SVM ---
svm_imp <- varImp(svm_model, scale = TRUE)$importance
# --- Ambil informasi support vectors ---
coefs <- svm_model$coefs              # alpha * y_i
SVs <- svm_model$SV                   # support vectors
# Hitung bobot: w = t(coefs) %*% SVs
w <- t(coefs) %*% as.matrix(SVs)
w <- as.vector(w)
# Susun feature importance berdasarkan nilai absolut bobot
svm_imp_df <- tibble(
Feature = colnames(SVs),
Importance = abs(w),
Model = "SVM (Linear Kernel)"
)
# --- Gabungkan keduanya ---
imp_combined <- bind_rows(rf_imp_df, svm_imp_df)
# --- Visualisasi gabungan ---
ggplot(imp_combined, aes(x = fct_reorder(Feature, Importance), y = Importance, fill = Model)) +
geom_col(position = "dodge", width = 0.6) +
coord_flip() +
labs(title = "Perbandingan Feature Importance: Random Forest vs SVM",
x = "Fitur", y = "Importance") +
scale_fill_manual(values = c("Random Forest" = "#1b9e77", "SVM (Linear Kernel)" = "#d95f02")) +
theme_minimal()
# Library yang berisi kumpulan packages untuk analisis data
library(tidyverse)
# library untuk manipulasi data
library(dplyr)
# library untuk manipulasi data tanggal
library(lubridate)
# library untuk menampilkan hasil statistik deskriptif
library(summarytools)
# library untuk visualisasi data
library (ggplot2)
#Mengabungkan visualisasi
library(gridExtra)
# library untuk membaca data dari file Excel (.xlsx)
library(readxl)
library(caret)
#PCA
library(FactoMineR)
#visualisasi PCA
library(factoextra)
#Correlation Matrix
library(corrplot)
# Visualisasi Correlation Matrix
library(ggcorrplot)
library(ranger)
library(randomForest)
library(pROC)
library(boot)
library(caTools)
library(e1071)
library(reshape2)
library(iml)
library(mlr)
