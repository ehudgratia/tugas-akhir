# Hapus data NA's
data_clean <- na.omit(data_transform)
colSums(is.na(data_clean))
#Melakukan analisis deskripsi
descr(data_clean)
# Histogram - Distribusi jumlah balita
p1 <- ggplot(data_clean, aes(x = jumlah_balita)) +
geom_histogram(bins = 30, fill = "blue", color = "black", alpha = 0.6) +
labs(title = "Distribusi Data Jumlah Balita",
x = "Jumlah Balita",
y = "Frekuensi") +
theme_minimal()
# Boxplot - Distribusi jumlah balita
p2 <- ggplot(data_clean, aes(x = jumlah_balita)) +
geom_boxplot() +
labs(title = "Boxplot Jumlah Balita",
x = "Jumlah Balita",
y = "Frekuensi") +
theme_minimal()
# Log Transformasi untuk membuat distribusi lebih seimbang
data_clean$jumlah_balita <- log1p(data_clean$jumlah_balita)  # log1p untuk menangani nol
# Histogram - Visualisasi Distribusi Data setelah Transformasi Log
p3 <- ggplot(data_clean, aes(x = jumlah_balita)) +
geom_histogram(bins = 30, fill = "blue", color = "black", alpha = 0.6) +
labs(title = "Distribusi Data Jumlah Balita\n(Log Transformasi)",
x = "Log(Jumlah Balita)",
y = "Frekuensi") +
theme_minimal()
# Boxplot - Visualisasi Distribusi Data setelah Transformasi Log
p4 <- ggplot(data_clean, aes(x = jumlah_balita)) +
geom_boxplot() +
labs(title = "Boxplot Jumlah Balita\n(Log Transformasi)",
x = "Log(Jumlah Balita)",
y = "Frekuensi") +
theme_minimal()
grid.arrange(p1, p2, ncol = 2)
grid.arrange(p3, p4, ncol = 2)
# Histogram - Distribusi Perentase Tinggi Balita
p5 <- ggplot(data_clean, aes(x = persentase_tinggi_balita)) +
geom_histogram(bins = 30, fill = "blue", color = "black", alpha = 0.6) +
labs(title = "Distribusi Data\nPersentase Tinggi Balita",
x = "Persentase Tinggi Balita",
y = "Frekuensi") +
theme_minimal()
# Boxplot - Distribusi Persentase Tinggi Balita
p6 <- ggplot(data_clean, aes(x = persentase_tinggi_balita)) +
geom_boxplot() +
labs(title = "Boxplot Persentase Tinggi Balita",
x = "Persentase Tinggi Balita",
y = "Frekuensi") +
theme_minimal()
# Log Transformasi untuk membuat distribusi lebih seimbang
data_clean$persentase_tinggi_balita <- log1p(data_clean$persentase_tinggi_balita)  # log1p untuk menangani nol
# Histogram - Visualisasi Distribusi Data setelah Transformasi Log
p7 <- ggplot(data_clean, aes(x = persentase_tinggi_balita)) +
geom_histogram(bins = 30, fill = "blue", color = "black", alpha = 0.6) +
labs(title = "Distribusi Data\nPersentase Tinggi Balita\n(Log Transformasi)",
x = "Log(Persentase Tinggi Balita)",
y = "Frekuensi") +
theme_minimal()
# Boxplot - Visualisasi Distribusi Data setelah Transformasi Log
p8 <- ggplot(data_clean, aes(x = persentase_tinggi_balita)) +
geom_boxplot() +
labs(title = "Boxplot\nPersentase Tinggi Balita\n(Log Transformasi)",
x = "Log(Persentase Tinggi Balita)",
y = "Frekuensi") +
theme_minimal()
grid.arrange(p5, p6, ncol = 2)
grid.arrange(p7, p8, ncol = 2)
# Histogram - Distribusi Perentase Gizi
p9 <- ggplot(data_clean, aes(x = persentase_gizi)) +
geom_histogram(bins = 30, fill = "blue", color = "black", alpha = 0.6) +
labs(title = "Distribusi Data Persentase Gizi",
x = "Persentase Gizi",
y = "Frekuensi") +
theme_minimal()
# Boxplot - Distribusi Persentase Gizi
p10 <- ggplot(data_clean, aes(x = persentase_gizi)) +
geom_boxplot() +
labs(title = "Boxplot Persentase Gizi",
x = "Persentase Gizi",
y = "Frekuensi") +
theme_minimal()
# Log Transformasi untuk membuat distribusi lebih seimbang
data_clean$persentase_gizi <- log1p(data_clean$persentase_gizi)  # log1p untuk menangani nol
# Histogram - Visualisasi Distribusi Data setelah Transformasi Log
p11 <- ggplot(data_clean, aes(x = persentase_gizi)) +
geom_histogram(bins = 30, fill = "blue", color = "black", alpha = 0.6) +
labs(title = "Distribusi Data\nPersentase Gizi\n(Log Transformasi)",
x = "Log(Persentase Gizi)",
y = "Frekuensi") +
theme_minimal()
# Boxplot - Visualisasi Distribusi Data setelah Transformasi Log
p12 <- ggplot(data_clean, aes(x = persentase_gizi)) +
geom_boxplot() +
labs(title = "Boxplot\nPersentase Gizi\n(Log Transformasi)",
x = "Log(Persentase Gizi)",
y = "Frekuensi") +
theme_minimal()
grid.arrange(p9, p10, ncol = 2)
grid.arrange(p11, p12, ncol = 2)
# Histogram - Distribusi Perentase Penduduk Miskin
p13 <- ggplot(data_clean, aes(x = persentase_penduduk_miskin)) +
geom_histogram(bins = 30, fill = "blue", color = "black", alpha = 0.6) +
labs(title = "Distribusi Data\nPersentase Penduduk Miskin",
x = "Persentase Penduduk Miskin",
y = "Frekuensi") +
theme_minimal()
# Boxplot - Distribusi Persentase Penduduk Miskin
p14 <- ggplot(data_clean, aes(x = persentase_penduduk_miskin)) +
geom_boxplot() +
labs(title = "Boxplot\nPersentase Penduduk Miskin",
x = "Persentase Penduduk Miskin",
y = "Frekuensi") +
theme_minimal()
# Log Transformasi untuk membuat distribusi lebih seimbang
data_clean$persentase_penduduk_miskin <- log1p(data_clean$persentase_penduduk_miskin)  # log1p untuk menangani nol
# Histogram - Visualisasi Distribusi Data setelah Transformasi Log
p15 <- ggplot(data_clean, aes(x = persentase_penduduk_miskin)) +
geom_histogram(bins = 30, fill = "blue", color = "black", alpha = 0.6) +
labs(title = "Distribusi Data\nPersentase Penduduk Miskin\n(Log Transformasi)",
x = "Log(Persentase Penduduk Miskin)",
y = "Frekuensi") +
theme_minimal()
# Boxplot - Visualisasi Distribusi Data setelah Transformasi Log
p16 <- ggplot(data_clean, aes(x = persentase_penduduk_miskin)) +
geom_boxplot() +
labs(title = "Boxplot\nPersentase Penduduk Miskin\n(Log Transformasi)",
x = "Log(Persentase Penduduk Miskin)",
y = "Frekuensi") +
theme_minimal()
grid.arrange(p13, p14, ncol = 2)
grid.arrange(p15, p16, ncol = 2)
# Histogram - Distribusi IPM
p17 <- ggplot(data_clean, aes(x = ipm)) +
geom_histogram(bins = 30, fill = "blue", color = "black", alpha = 0.6) +
labs(title = "Distribusi Data IPM",
x = "IPM",
y = "Frekuensi") +
theme_minimal()
# Boxplot - Distribusi IPM
p18 <- ggplot(data_clean, aes(x = ipm)) +
geom_boxplot() +
labs(title = "Boxplot IPM",
x = "IPM",
y = "Frekuensi") +
theme_minimal()
# Log Transformasi untuk membuat distribusi lebih seimbang
data_clean$ipm <- log1p(data_clean$ipm)  # log1p untuk menangani nol
# Histogram - Visualisasi Distribusi Data setelah Transformasi Log
p19 <- ggplot(data_clean, aes(x = ipm)) +
geom_histogram(bins = 30, fill = "blue", color = "black", alpha = 0.6) +
labs(title = "Distribusi Data IPM \n(Log Transformasi)",
x = "Log(IPM)",
y = "Frekuensi") +
theme_minimal()
# Boxplot - Visualisasi Distribusi Data setelah Transformasi Log
p20 <- ggplot(data_clean, aes(x = ipm)) +
geom_boxplot() +
labs(title = "Boxplot IPM \n(Log Transformasi)",
x = "Log(IPM)",
y = "Frekuensi") +
theme_minimal()
##Deteksi Outlier pada Jumlah Balita
Q1 <- quantile(data_clean$ipm, 0.25)
Q3 <- quantile(data_clean$ipm, 0.75)
IQR <- Q3 - Q1
lower_bound <- Q1 - 1.5 * IQR
upper_bound <- Q3 + 1.5 * IQR
repeat {
Q1 <- quantile(data_clean$ipm, 0.25, na.rm = TRUE)
Q3 <- quantile(data_clean$ipm, 0.75, na.rm = TRUE)
IQR <- Q3 - Q1
lower_bound <- Q1 - 1.5 * IQR
upper_bound <- Q3 + 1.5 * IQR
# Simpan jumlah data sebelum filtering
n_before <- nrow(data_clean)
# Hapus outlier langsung dari data_clean tanpa membuat dataset baru
data_clean <- data_clean[data_clean$ipm >= lower_bound & data_clean$ipm <= upper_bound, ]
# Cek jika jumlah data tidak berubah, maka keluar dari loop
if (nrow(data_clean) == n_before) break
}
##Menghapus outlier
data_clean <- data_clean[data_clean$ipm >= lower_bound & data_clean$ipm <= upper_bound, ]
# Boxplot - Visualisasi Distribusi Data setelah Transformasi Log
p21 <- ggplot(data_clean, aes(x = ipm)) +
geom_histogram(bins = 30, fill = "blue", color = "black", alpha = 0.6) +
labs(title = "Distribusi Data IPM\n(Interquartile Range (IQR))",
x = "IPM",
y = "Frekuensi") +
theme_minimal()
# Boxplot - Visualisasi Distribusi Data setelah Transformasi Log
p22 <- ggplot(data_clean, aes(x = ipm)) +
geom_boxplot() +
labs(title = "Boxplot IPM\n(Interquartile Range (IQR))",
x = "IPM",
y = "Frekuensi") +
theme_minimal()
grid.arrange(p17, p18, ncol = 2)
grid.arrange(p19, p20, ncol = 2)
grid.arrange(p21, p22, ncol = 2)
# Histogram - Distribusi GDP
p23 <- ggplot(data_clean, aes(x = nilai_gdp)) +
geom_histogram(bins = 30, fill = "blue", color = "black", alpha = 0.6) +
labs(title = "Distribusi Data GDP",
x = "GDP",
y = "Frekuensi") +
theme_minimal()
# Boxplot - Distribusi GDP
p24 <- ggplot(data_clean, aes(x = nilai_gdp)) +
geom_boxplot() +
labs(title = "Boxplot GDP",
x = "GDP",
y = "Frekuensi") +
theme_minimal()
# Log Transformasi untuk membuat distribusi lebih seimbang
data_clean$nilai_gdp <- log1p(data_clean$nilai_gdp)  # log1p untuk menangani nol
# Histogram - Visualisasi Distribusi Data setelah Transformasi Log
p25 <- ggplot(data_clean, aes(x = nilai_gdp)) +
geom_histogram(bins = 30, fill = "blue", color = "black", alpha = 0.6) +
labs(title = "Distribusi Data GDP\n(Log Transformasi)",
x = "Log(GDP)",
y = "Frekuensi") +
theme_minimal()
# Boxplot - Visualisasi Distribusi Data setelah Transformasi Log
p26 <- ggplot(data_clean, aes(x = nilai_gdp)) +
geom_boxplot() +
labs(title = "Boxplot GDP\n(Log Transformasi)",
x = "Log(GDP)",
y = "Frekuensi") +
theme_minimal()
grid.arrange(p23, p24, ncol = 2)
grid.arrange(p25, p26, ncol = 2)
# Histogram - Distribusi Upah
p27 <- ggplot(data_clean, aes(x = upah)) +
geom_histogram(bins = 30, fill = "blue", color = "black", alpha = 0.6) +
labs(title = "Distribusi Data Upah",
x = "Upah",
y = "Frekuensi") +
theme_minimal()
# Boxplot - Distribusi Upah
p28 <- ggplot(data_clean, aes(x = upah)) +
geom_boxplot() +
labs(title = "Boxplot Upah",
x = "Upah",
y = "Frekuensi") +
theme_minimal()
grid.arrange(p27, p28, ncol = 2)
# Histogram - Distribusi IDM
p29 <- ggplot(data_clean, aes(x = idm)) +
geom_histogram(bins = 30, fill = "blue", color = "black", alpha = 0.6) +
labs(title = "Distribusi Data IDM",
x = "IDM",
y = "Frekuensi") +
theme_minimal()
# Boxplot - Distribusi IDM
p30 <- ggplot(data_clean, aes(x = idm)) +
geom_boxplot() +
labs(title = "Boxplot IDM",
x = "IDM",
y = "Frekuensi") +
theme_minimal()
# Log Transformasi untuk membuat distribusi lebih seimbang
data_clean$idm <- log1p(data_clean$idm)  # log1p untuk menangani nol
# Histogram - Visualisasi Distribusi Data setelah Transformasi Log
p31 <- ggplot(data_clean, aes(x = idm)) +
geom_histogram(bins = 30, fill = "blue", color = "black", alpha = 0.6) +
labs(title = "Distribusi Data IDM\n(Log Transformasi)",
x = "Log(IDM)",
y = "Frekuensi") +
theme_minimal()
# Boxplot - Visualisasi Distribusi Data setelah Transformasi Log
p32 <- ggplot(data_clean, aes(x = idm)) +
geom_boxplot() +
labs(title = "Boxplot IDM\n(Log Transformasi)",
x = "Log(IDM)",
y = "Frekuensi") +
theme_minimal()
grid.arrange(p29, p30, ncol = 2)
grid.arrange(p31, p32, ncol = 2)
target <- data_clean$persentase_stunting
feature <- data_clean[, !names(data_clean) %in% "persentase_stunting"]
# Correlation Matrix
## Pilih hanya variabel numerik
feature_numeric <- feature %>%
select(where(is.numeric)) %>%
select(-tahun)  # Exclude the year column
## Hitung matriks korelasi sebelum penghapusan
cor_matrix_before <- cor(feature_numeric, use = "pairwise.complete.obs", method = "pearson")
## Temukan fitur yang memiliki korelasi tinggi (|r| > 0.75)
high_cor <- findCorrelation(cor_matrix_before, cutoff = 0.75, names = FALSE)
## Hapus fitur yang memiliki korelasi tinggi
feature_filtered <- feature_numeric %>% select(-all_of(names(feature_numeric)[high_cor]))
## Hitung kembali matriks korelasi setelah penghapusan
cor_matrix_after <- cor(feature_filtered, use = "pairwise.complete.obs", method = "pearson")
## Plot Sebelum Penghapusan (Seperti Gambar yang Anda Unggah)
ggcorrplot(cor_matrix_before,
type = "lower",        # Hanya setengah bagian bawah
lab = TRUE,            # Menampilkan nilai korelasi
lab_size = 3,          # Ukuran teks
colors = c("red", "white", "blue"),  # Skala warna (Merah - Putih - Biru)
title = "Matriks Korelasi Sebelum Penghapusan",
show.legend = TRUE,
ggtheme = ggplot2::theme_minimal())
## Plot Setelah Penghapusan (Untuk Perbandingan)
ggcorrplot(cor_matrix_after,
type = "lower",
lab = TRUE,
lab_size = 3,
colors = c("red", "white", "blue"),
title = "Matriks Korelasi Setelah Penghapusan",
show.legend = TRUE,
ggtheme = ggplot2::theme_minimal())
rfe_result
# Buat dataframe hasil RFE
feature_ranking <- data.frame(
Feature = rownames(varImp(rfe_result)),
Importance = varImp(rfe_result)$Overall
)
# Plot ranking fitur
ggplot(feature_ranking, aes(x = reorder(Feature, Importance), y = Importance)) +
geom_bar(stat = "identity", fill = "blue") +
coord_flip() +
labs(title = "Feature Ranking dari RFE",
x = "Fitur",
y = "Pentingnya Fitur")
# Principal Component Analysis (PCA)
## Mengambil nama fitur terbaik
selected_features <- predictors(rfe_result)
## Data frame hanya dengan fitur yang dipilih
features_selected <- feature_filtered[, selected_features]
## Pre-Processing Data
rfe_pre <- preProcess(features_selected, method = c("center", "scale"))
## Normalisasi
rfe_scaled <- predict(rfe_pre, features_selected)
## Cek ringkasan data setelah standarisasi
summary(rfe_scaled)
## Jalankan PCA dengan data yang telah distandarisasi
pca_result <- PCA(rfe_scaled, graph = FALSE)
## Lihat ringkasan PCA
summary(pca_result)
## Melacak kontribusi variabel
pca_result$var$contrib
## Jumlah komponen utama yang optimal untuk analisis
fviz_eig(pca_result, addlabels = TRUE, ylim = c(0, 100))
## Membuat peta factor untuk kontribusi variabel
fviz_pca_var(pca_result, col.var = "contrib", gradient.cols = c("#002bbb", "#bb2e00"), repel = TRUE)
## Visualisasi kontribusi dari variabel
fviz_contrib(pca_result, choice = "var", axes = 1, top = 5)
## Visualisasi untuk semua hubungan antar variabel
fviz_pca_biplot(pca_result)
# mengubah variabel target menjadi faktor
data_train$stunting <- as.factor(data_train$stunting)
data_test$stunting <- as.factor(data_test$stunting)
# Membangun Model RF
set.seed(123) #Set seed untuk hasil yang reproducible
rf_model <- randomForest(stunting ~ ., data = data_train, importance = TRUE)
# Print hasil model
print(rf_model)
# Melakukan Prediksi
pred_rf  <- predict(rf_model, newdata = data_test, type = "class")
# Evaluasi model pada test data
conf_matrix_rf <- confusionMatrix(pred_rf, data_test$stunting)
conf_matrix_rf
# Menampilkan metrik tambahan untuk test data
cat("Akurasi pada data test:", conf_matrix_rf$overall["Accuracy"], "\n")
cat("Recall pada data test:", conf_matrix_rf$byClass["Sensitivity"], "\n")
cat("Precision pada data test:", conf_matrix_rf$byClass["Precision"], "\n")
cat("F1-score pada data test:", conf_matrix_rf$byClass["F1"], "\n")
# Plot pentingnya fitur
varImpPlot(rf_model, main = "Feature Importance - Random Forest")
# Feature Importance dari model Random Forest
importance <- as.data.frame(importance(rf_model))
importance <- importance[order(-importance$MeanDecreaseGini), , drop=FALSE]
print(importance)
# Visualisasi
ggplot(importance, aes(x = reorder(row.names(importance), MeanDecreaseGini), y = MeanDecreaseGini)) +
geom_bar(stat = "identity", fill = "blue") +
coord_flip() +
labs(title = "Feature Importance - Random Forest", x = "Faktor Sosioekonomi", y = "Tingkat Kepentingan")
svm_model <- svm(stunting ~., data = data_train)
print(svm_model)
# Melakukan prediksi
pred_svm <- predict(svm_model, data_test)
# Evaluasi model pada test data
conf_matrix_svm <- confusionMatrix(pred_svm, data_test$stunting)
conf_matrix_svm
# menggunakan karnel radial
svm_radial <-svm(stunting ~., data = data_train, kernel = 'radial', cost = 100, gamma = 0.1)
predicted.values <- predict(svm_radial, data_test)
# Evaluasi model pada test data
conf_matrix_svmradial <- confusionMatrix(predicted.values, data_test$stunting)
conf_matrix_svmradial
# Menggunakan karnel polynomial
svm_poly <- svm(stunting ~ ., data = data_train, kernel = "polynomial", cost = 100, gamma = 0.1)
pred_poly <- predict(svm_poly, data_test)
# Evaluasi model pada test data
conf_matrix_svmpoly <- confusionMatrix(pred_poly, data_test$stunting)
conf_matrix_svmpoly
# Menggunakan karnel linear
svm_linear <- svm(stunting ~ ., data = data_train, kernel = "linear", cost = 100)
pred_linear <- predict(svm_linear, data_test)
# Evaluasi model pada test data
conf_matrix_svmlinear <- confusionMatrix(pred_linear, data_test$stunting)
conf_matrix_svmlinear
# Menggunakan karnel sigmoid
svm_sigmoid <- svm(stunting ~ ., data = data_train, kernel = "sigmoid", cost = 100, gamma = 0.1)
pred_sigmoid <- predict(svm_sigmoid, data_test)
# Evaluasi model pada test data
conf_matrix_svmsigmoid <- confusionMatrix(pred_sigmoid, data_test$stunting)
conf_matrix_svmsigmoid
# Library yang berisi kumpulan packages untuk analisis data
library(tidyverse)
# library untuk manipulasi data
library(dplyr)
# library untuk manipulasi data tanggal
library(lubridate)
# library untuk menampilkan hasil statistik deskriptif
library(summarytools)
# library untuk visualisasi data
library (ggplot2)
#Mengabungkan visualisasi
library(gridExtra)
# library untuk membaca data dari file Excel (.xlsx)
library(readxl)
library(caret)
#PCA
library(FactoMineR)
#visualisasi PCA
library(factoextra)
#Correlation Matrix
library(corrplot)
# Visualisasi Correlation Matrix
library(ggcorrplot)
library(ranger)
library(randomForest)
library(pROC)
library(boot)
library(caTools)
library(e1071)
# Melakukan Prediksi
pred_rf  <- predict(rf_model, newdata = data_test, type = "class")
# Evaluasi model pada test data
conf_matrix_rf <- confusionMatrix(pred_rf, data_test$stunting)
conf_matrix_rf
# Melakukan Prediksi
pred_rf  <- predict(rf_model, newdata = data_test, type = "class")
# Evaluasi model pada test data
conf_matrix_rf <- confusionMatrix(pred_rf, data_test$stunting)
conf_matrix_rf
# Random Forest
accuracy_rf <- (8555 + 8357) / (8555 + 9 + 142 + 20051)
accuracy_rf
# Random Forest
tp_rf = 8697
fp_rf = 0
tn_rf = 8621
fn_rf = 0
accuracy_rf <- (tp_rf + tn_rf) / (tp_rf + fp_rf + fn_rf + tn_rf)
accuracy_rf
precision_rf <- tp_rf/(tp_rf+fp_rf)
precision_rf
# Random Forest
tp_rf = 8697
fp_rf = 0
tn_rf = 8621
fn_rf = 0
accuracy_rf <- (tp_rf + tn_rf) / (tp_rf + fp_rf + fn_rf + tn_rf)
accuracy_rf
precision_rf <- tp_rf/(tp_rf+fp_rf)
precision_rf
recall_rf <- tp_rf/(tp_rf+fn_rf)
recall_rf
# Random Forest
tp_rf = 8697
fp_rf = 0
tn_rf = 8621
fn_rf = 0
accuracy_rf <- (tp_rf + tn_rf) / (tp_rf + fp_rf + fn_rf + tn_rf)
accuracy_rf
precision_rf <- tp_rf/(tp_rf+fp_rf)
precision_rf
recall_rf <- tp_rf/(tp_rf+fn_rf)
recall_rf
f1_score_rf <- (2 * precision_rf * recall_rf)/ (precision_rf + recall_rf)
f1_score_rf
# SVM
tp_svm = 8555
fp_svm = 9
tn_svm = 8612
fn_svm = 142
accuracy_svm <- (tp_svm + tn_svm) / (tp_svm + fp_svm + fn_svm + tn_svm)
accuracy_svm
precision_svm <- tp_svm/(tp_svm+fp_svm)
precision_svm
recall_svm <- tp_svm/(tp_svm+fn_svm)
recall_svm
f1_score_svm <- (2 * precision_svm * recall_svm)/ (precision_svm + recall_svm)
f1_score_svm
# SVM
tp_svm = 8555
fp_svm = 9
fn_svm = 142
tn_svm = 8612
accuracy_svm <- (tp_svm + tn_svm) / (tp_svm + fp_svm + fn_svm + tn_svm)
accuracy_svm
precision_svm <- tp_svm/(tp_svm+fp_svm)
precision_svm
recall_svm <- tp_svm/(tp_svm+fn_svm)
recall_svm
f1_score_svm <- (2 * precision_svm * recall_svm)/ (precision_svm + recall_svm)
f1_score_svm
